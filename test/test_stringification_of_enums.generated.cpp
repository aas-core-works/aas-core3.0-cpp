// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_stringification_of_enums.py
// Do NOT edit or append.

#include "aas_core/aas_3_0/stringification.hpp"

#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

namespace aas = aas_core::aas_3_0;

TEST_CASE("Test ModelType round-trip") {
  REQUIRE(
    aas::types::ModelType::kExtension
    == aas::stringification::MustModelTypeFromString(
      "Extension"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kExtension
    )
    == "Extension"
  );

  REQUIRE(
    aas::types::ModelType::kAdministrativeInformation
    == aas::stringification::MustModelTypeFromString(
      "AdministrativeInformation"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kAdministrativeInformation
    )
    == "AdministrativeInformation"
  );

  REQUIRE(
    aas::types::ModelType::kQualifier
    == aas::stringification::MustModelTypeFromString(
      "Qualifier"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kQualifier
    )
    == "Qualifier"
  );

  REQUIRE(
    aas::types::ModelType::kAssetAdministrationShell
    == aas::stringification::MustModelTypeFromString(
      "AssetAdministrationShell"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kAssetAdministrationShell
    )
    == "AssetAdministrationShell"
  );

  REQUIRE(
    aas::types::ModelType::kAssetInformation
    == aas::stringification::MustModelTypeFromString(
      "AssetInformation"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kAssetInformation
    )
    == "AssetInformation"
  );

  REQUIRE(
    aas::types::ModelType::kResource
    == aas::stringification::MustModelTypeFromString(
      "Resource"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kResource
    )
    == "Resource"
  );

  REQUIRE(
    aas::types::ModelType::kSpecificAssetId
    == aas::stringification::MustModelTypeFromString(
      "SpecificAssetId"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kSpecificAssetId
    )
    == "SpecificAssetId"
  );

  REQUIRE(
    aas::types::ModelType::kSubmodel
    == aas::stringification::MustModelTypeFromString(
      "Submodel"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kSubmodel
    )
    == "Submodel"
  );

  REQUIRE(
    aas::types::ModelType::kRelationshipElement
    == aas::stringification::MustModelTypeFromString(
      "RelationshipElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kRelationshipElement
    )
    == "RelationshipElement"
  );

  REQUIRE(
    aas::types::ModelType::kSubmodelElementList
    == aas::stringification::MustModelTypeFromString(
      "SubmodelElementList"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kSubmodelElementList
    )
    == "SubmodelElementList"
  );

  REQUIRE(
    aas::types::ModelType::kSubmodelElementCollection
    == aas::stringification::MustModelTypeFromString(
      "SubmodelElementCollection"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kSubmodelElementCollection
    )
    == "SubmodelElementCollection"
  );

  REQUIRE(
    aas::types::ModelType::kProperty
    == aas::stringification::MustModelTypeFromString(
      "Property"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kProperty
    )
    == "Property"
  );

  REQUIRE(
    aas::types::ModelType::kMultiLanguageProperty
    == aas::stringification::MustModelTypeFromString(
      "MultiLanguageProperty"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kMultiLanguageProperty
    )
    == "MultiLanguageProperty"
  );

  REQUIRE(
    aas::types::ModelType::kRange
    == aas::stringification::MustModelTypeFromString(
      "Range"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kRange
    )
    == "Range"
  );

  REQUIRE(
    aas::types::ModelType::kReferenceElement
    == aas::stringification::MustModelTypeFromString(
      "ReferenceElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kReferenceElement
    )
    == "ReferenceElement"
  );

  REQUIRE(
    aas::types::ModelType::kBlob
    == aas::stringification::MustModelTypeFromString(
      "Blob"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kBlob
    )
    == "Blob"
  );

  REQUIRE(
    aas::types::ModelType::kFile
    == aas::stringification::MustModelTypeFromString(
      "File"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kFile
    )
    == "File"
  );

  REQUIRE(
    aas::types::ModelType::kAnnotatedRelationshipElement
    == aas::stringification::MustModelTypeFromString(
      "AnnotatedRelationshipElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kAnnotatedRelationshipElement
    )
    == "AnnotatedRelationshipElement"
  );

  REQUIRE(
    aas::types::ModelType::kEntity
    == aas::stringification::MustModelTypeFromString(
      "Entity"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kEntity
    )
    == "Entity"
  );

  REQUIRE(
    aas::types::ModelType::kEventPayload
    == aas::stringification::MustModelTypeFromString(
      "EventPayload"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kEventPayload
    )
    == "EventPayload"
  );

  REQUIRE(
    aas::types::ModelType::kBasicEventElement
    == aas::stringification::MustModelTypeFromString(
      "BasicEventElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kBasicEventElement
    )
    == "BasicEventElement"
  );

  REQUIRE(
    aas::types::ModelType::kOperation
    == aas::stringification::MustModelTypeFromString(
      "Operation"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kOperation
    )
    == "Operation"
  );

  REQUIRE(
    aas::types::ModelType::kOperationVariable
    == aas::stringification::MustModelTypeFromString(
      "OperationVariable"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kOperationVariable
    )
    == "OperationVariable"
  );

  REQUIRE(
    aas::types::ModelType::kCapability
    == aas::stringification::MustModelTypeFromString(
      "Capability"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kCapability
    )
    == "Capability"
  );

  REQUIRE(
    aas::types::ModelType::kConceptDescription
    == aas::stringification::MustModelTypeFromString(
      "ConceptDescription"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kConceptDescription
    )
    == "ConceptDescription"
  );

  REQUIRE(
    aas::types::ModelType::kReference
    == aas::stringification::MustModelTypeFromString(
      "Reference"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kReference
    )
    == "Reference"
  );

  REQUIRE(
    aas::types::ModelType::kKey
    == aas::stringification::MustModelTypeFromString(
      "Key"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kKey
    )
    == "Key"
  );

  REQUIRE(
    aas::types::ModelType::kLangStringNameType
    == aas::stringification::MustModelTypeFromString(
      "LangStringNameType"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kLangStringNameType
    )
    == "LangStringNameType"
  );

  REQUIRE(
    aas::types::ModelType::kLangStringTextType
    == aas::stringification::MustModelTypeFromString(
      "LangStringTextType"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kLangStringTextType
    )
    == "LangStringTextType"
  );

  REQUIRE(
    aas::types::ModelType::kEnvironment
    == aas::stringification::MustModelTypeFromString(
      "Environment"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kEnvironment
    )
    == "Environment"
  );

  REQUIRE(
    aas::types::ModelType::kEmbeddedDataSpecification
    == aas::stringification::MustModelTypeFromString(
      "EmbeddedDataSpecification"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kEmbeddedDataSpecification
    )
    == "EmbeddedDataSpecification"
  );

  REQUIRE(
    aas::types::ModelType::kLevelType
    == aas::stringification::MustModelTypeFromString(
      "LevelType"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kLevelType
    )
    == "LevelType"
  );

  REQUIRE(
    aas::types::ModelType::kValueReferencePair
    == aas::stringification::MustModelTypeFromString(
      "ValueReferencePair"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kValueReferencePair
    )
    == "ValueReferencePair"
  );

  REQUIRE(
    aas::types::ModelType::kValueList
    == aas::stringification::MustModelTypeFromString(
      "ValueList"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kValueList
    )
    == "ValueList"
  );

  REQUIRE(
    aas::types::ModelType::kLangStringPreferredNameTypeIec61360
    == aas::stringification::MustModelTypeFromString(
      "LangStringPreferredNameTypeIec61360"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kLangStringPreferredNameTypeIec61360
    )
    == "LangStringPreferredNameTypeIec61360"
  );

  REQUIRE(
    aas::types::ModelType::kLangStringShortNameTypeIec61360
    == aas::stringification::MustModelTypeFromString(
      "LangStringShortNameTypeIec61360"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kLangStringShortNameTypeIec61360
    )
    == "LangStringShortNameTypeIec61360"
  );

  REQUIRE(
    aas::types::ModelType::kLangStringDefinitionTypeIec61360
    == aas::stringification::MustModelTypeFromString(
      "LangStringDefinitionTypeIec61360"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kLangStringDefinitionTypeIec61360
    )
    == "LangStringDefinitionTypeIec61360"
  );

  REQUIRE(
    aas::types::ModelType::kDataSpecificationIec61360
    == aas::stringification::MustModelTypeFromString(
      "DataSpecificationIec61360"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModelType::kDataSpecificationIec61360
    )
    == "DataSpecificationIec61360"
  );
}

TEST_CASE("Test failure on ModelType") {
  CHECK(
    !aas::stringification::ModelTypeFromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustModelTypeFromString(
      "Totally utterly invalid"
    ),
    "Unexpected ModelType literal: Totally utterly invalid"
  );
}

TEST_CASE("Test ModellingKind round-trip") {
  REQUIRE(
    aas::types::ModellingKind::kTemplate
    == aas::stringification::MustModellingKindFromString(
      "Template"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModellingKind::kTemplate
    )
    == "Template"
  );

  REQUIRE(
    aas::types::ModellingKind::kInstance
    == aas::stringification::MustModellingKindFromString(
      "Instance"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ModellingKind::kInstance
    )
    == "Instance"
  );
}

TEST_CASE("Test failure on ModellingKind") {
  CHECK(
    !aas::stringification::ModellingKindFromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustModellingKindFromString(
      "Totally utterly invalid"
    ),
    "Unexpected ModellingKind literal: Totally utterly invalid"
  );
}

TEST_CASE("Test QualifierKind round-trip") {
  REQUIRE(
    aas::types::QualifierKind::kValueQualifier
    == aas::stringification::MustQualifierKindFromString(
      "ValueQualifier"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::QualifierKind::kValueQualifier
    )
    == "ValueQualifier"
  );

  REQUIRE(
    aas::types::QualifierKind::kConceptQualifier
    == aas::stringification::MustQualifierKindFromString(
      "ConceptQualifier"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::QualifierKind::kConceptQualifier
    )
    == "ConceptQualifier"
  );

  REQUIRE(
    aas::types::QualifierKind::kTemplateQualifier
    == aas::stringification::MustQualifierKindFromString(
      "TemplateQualifier"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::QualifierKind::kTemplateQualifier
    )
    == "TemplateQualifier"
  );
}

TEST_CASE("Test failure on QualifierKind") {
  CHECK(
    !aas::stringification::QualifierKindFromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustQualifierKindFromString(
      "Totally utterly invalid"
    ),
    "Unexpected QualifierKind literal: Totally utterly invalid"
  );
}

TEST_CASE("Test AssetKind round-trip") {
  REQUIRE(
    aas::types::AssetKind::kType
    == aas::stringification::MustAssetKindFromString(
      "Type"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AssetKind::kType
    )
    == "Type"
  );

  REQUIRE(
    aas::types::AssetKind::kInstance
    == aas::stringification::MustAssetKindFromString(
      "Instance"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AssetKind::kInstance
    )
    == "Instance"
  );

  REQUIRE(
    aas::types::AssetKind::kNotApplicable
    == aas::stringification::MustAssetKindFromString(
      "NotApplicable"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AssetKind::kNotApplicable
    )
    == "NotApplicable"
  );
}

TEST_CASE("Test failure on AssetKind") {
  CHECK(
    !aas::stringification::AssetKindFromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustAssetKindFromString(
      "Totally utterly invalid"
    ),
    "Unexpected AssetKind literal: Totally utterly invalid"
  );
}

TEST_CASE("Test AasSubmodelElements round-trip") {
  REQUIRE(
    aas::types::AasSubmodelElements::kAnnotatedRelationshipElement
    == aas::stringification::MustAasSubmodelElementsFromString(
      "AnnotatedRelationshipElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kAnnotatedRelationshipElement
    )
    == "AnnotatedRelationshipElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kBasicEventElement
    == aas::stringification::MustAasSubmodelElementsFromString(
      "BasicEventElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kBasicEventElement
    )
    == "BasicEventElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kBlob
    == aas::stringification::MustAasSubmodelElementsFromString(
      "Blob"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kBlob
    )
    == "Blob"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kCapability
    == aas::stringification::MustAasSubmodelElementsFromString(
      "Capability"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kCapability
    )
    == "Capability"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kDataElement
    == aas::stringification::MustAasSubmodelElementsFromString(
      "DataElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kDataElement
    )
    == "DataElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kEntity
    == aas::stringification::MustAasSubmodelElementsFromString(
      "Entity"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kEntity
    )
    == "Entity"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kEventElement
    == aas::stringification::MustAasSubmodelElementsFromString(
      "EventElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kEventElement
    )
    == "EventElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kFile
    == aas::stringification::MustAasSubmodelElementsFromString(
      "File"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kFile
    )
    == "File"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kMultiLanguageProperty
    == aas::stringification::MustAasSubmodelElementsFromString(
      "MultiLanguageProperty"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kMultiLanguageProperty
    )
    == "MultiLanguageProperty"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kOperation
    == aas::stringification::MustAasSubmodelElementsFromString(
      "Operation"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kOperation
    )
    == "Operation"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kProperty
    == aas::stringification::MustAasSubmodelElementsFromString(
      "Property"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kProperty
    )
    == "Property"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kRange
    == aas::stringification::MustAasSubmodelElementsFromString(
      "Range"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kRange
    )
    == "Range"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kReferenceElement
    == aas::stringification::MustAasSubmodelElementsFromString(
      "ReferenceElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kReferenceElement
    )
    == "ReferenceElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kRelationshipElement
    == aas::stringification::MustAasSubmodelElementsFromString(
      "RelationshipElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kRelationshipElement
    )
    == "RelationshipElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kSubmodelElement
    == aas::stringification::MustAasSubmodelElementsFromString(
      "SubmodelElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kSubmodelElement
    )
    == "SubmodelElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kSubmodelElementList
    == aas::stringification::MustAasSubmodelElementsFromString(
      "SubmodelElementList"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kSubmodelElementList
    )
    == "SubmodelElementList"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kSubmodelElementCollection
    == aas::stringification::MustAasSubmodelElementsFromString(
      "SubmodelElementCollection"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::AasSubmodelElements::kSubmodelElementCollection
    )
    == "SubmodelElementCollection"
  );
}

TEST_CASE("Test failure on AasSubmodelElements") {
  CHECK(
    !aas::stringification::AasSubmodelElementsFromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustAasSubmodelElementsFromString(
      "Totally utterly invalid"
    ),
    "Unexpected AasSubmodelElements literal: Totally utterly invalid"
  );
}

TEST_CASE("Test EntityType round-trip") {
  REQUIRE(
    aas::types::EntityType::kCoManagedEntity
    == aas::stringification::MustEntityTypeFromString(
      "CoManagedEntity"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::EntityType::kCoManagedEntity
    )
    == "CoManagedEntity"
  );

  REQUIRE(
    aas::types::EntityType::kSelfManagedEntity
    == aas::stringification::MustEntityTypeFromString(
      "SelfManagedEntity"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::EntityType::kSelfManagedEntity
    )
    == "SelfManagedEntity"
  );
}

TEST_CASE("Test failure on EntityType") {
  CHECK(
    !aas::stringification::EntityTypeFromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustEntityTypeFromString(
      "Totally utterly invalid"
    ),
    "Unexpected EntityType literal: Totally utterly invalid"
  );
}

TEST_CASE("Test Direction round-trip") {
  REQUIRE(
    aas::types::Direction::kInput
    == aas::stringification::MustDirectionFromString(
      "input"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::Direction::kInput
    )
    == "input"
  );

  REQUIRE(
    aas::types::Direction::kOutput
    == aas::stringification::MustDirectionFromString(
      "output"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::Direction::kOutput
    )
    == "output"
  );
}

TEST_CASE("Test failure on Direction") {
  CHECK(
    !aas::stringification::DirectionFromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustDirectionFromString(
      "Totally utterly invalid"
    ),
    "Unexpected Direction literal: Totally utterly invalid"
  );
}

TEST_CASE("Test StateOfEvent round-trip") {
  REQUIRE(
    aas::types::StateOfEvent::kOn
    == aas::stringification::MustStateOfEventFromString(
      "on"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::StateOfEvent::kOn
    )
    == "on"
  );

  REQUIRE(
    aas::types::StateOfEvent::kOff
    == aas::stringification::MustStateOfEventFromString(
      "off"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::StateOfEvent::kOff
    )
    == "off"
  );
}

TEST_CASE("Test failure on StateOfEvent") {
  CHECK(
    !aas::stringification::StateOfEventFromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustStateOfEventFromString(
      "Totally utterly invalid"
    ),
    "Unexpected StateOfEvent literal: Totally utterly invalid"
  );
}

TEST_CASE("Test ReferenceTypes round-trip") {
  REQUIRE(
    aas::types::ReferenceTypes::kExternalReference
    == aas::stringification::MustReferenceTypesFromString(
      "ExternalReference"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ReferenceTypes::kExternalReference
    )
    == "ExternalReference"
  );

  REQUIRE(
    aas::types::ReferenceTypes::kModelReference
    == aas::stringification::MustReferenceTypesFromString(
      "ModelReference"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::ReferenceTypes::kModelReference
    )
    == "ModelReference"
  );
}

TEST_CASE("Test failure on ReferenceTypes") {
  CHECK(
    !aas::stringification::ReferenceTypesFromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustReferenceTypesFromString(
      "Totally utterly invalid"
    ),
    "Unexpected ReferenceTypes literal: Totally utterly invalid"
  );
}

TEST_CASE("Test KeyTypes round-trip") {
  REQUIRE(
    aas::types::KeyTypes::kAnnotatedRelationshipElement
    == aas::stringification::MustKeyTypesFromString(
      "AnnotatedRelationshipElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kAnnotatedRelationshipElement
    )
    == "AnnotatedRelationshipElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kAssetAdministrationShell
    == aas::stringification::MustKeyTypesFromString(
      "AssetAdministrationShell"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kAssetAdministrationShell
    )
    == "AssetAdministrationShell"
  );

  REQUIRE(
    aas::types::KeyTypes::kBasicEventElement
    == aas::stringification::MustKeyTypesFromString(
      "BasicEventElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kBasicEventElement
    )
    == "BasicEventElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kBlob
    == aas::stringification::MustKeyTypesFromString(
      "Blob"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kBlob
    )
    == "Blob"
  );

  REQUIRE(
    aas::types::KeyTypes::kCapability
    == aas::stringification::MustKeyTypesFromString(
      "Capability"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kCapability
    )
    == "Capability"
  );

  REQUIRE(
    aas::types::KeyTypes::kConceptDescription
    == aas::stringification::MustKeyTypesFromString(
      "ConceptDescription"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kConceptDescription
    )
    == "ConceptDescription"
  );

  REQUIRE(
    aas::types::KeyTypes::kDataElement
    == aas::stringification::MustKeyTypesFromString(
      "DataElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kDataElement
    )
    == "DataElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kEntity
    == aas::stringification::MustKeyTypesFromString(
      "Entity"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kEntity
    )
    == "Entity"
  );

  REQUIRE(
    aas::types::KeyTypes::kEventElement
    == aas::stringification::MustKeyTypesFromString(
      "EventElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kEventElement
    )
    == "EventElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kFile
    == aas::stringification::MustKeyTypesFromString(
      "File"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kFile
    )
    == "File"
  );

  REQUIRE(
    aas::types::KeyTypes::kFragmentReference
    == aas::stringification::MustKeyTypesFromString(
      "FragmentReference"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kFragmentReference
    )
    == "FragmentReference"
  );

  REQUIRE(
    aas::types::KeyTypes::kGlobalReference
    == aas::stringification::MustKeyTypesFromString(
      "GlobalReference"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kGlobalReference
    )
    == "GlobalReference"
  );

  REQUIRE(
    aas::types::KeyTypes::kIdentifiable
    == aas::stringification::MustKeyTypesFromString(
      "Identifiable"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kIdentifiable
    )
    == "Identifiable"
  );

  REQUIRE(
    aas::types::KeyTypes::kMultiLanguageProperty
    == aas::stringification::MustKeyTypesFromString(
      "MultiLanguageProperty"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kMultiLanguageProperty
    )
    == "MultiLanguageProperty"
  );

  REQUIRE(
    aas::types::KeyTypes::kOperation
    == aas::stringification::MustKeyTypesFromString(
      "Operation"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kOperation
    )
    == "Operation"
  );

  REQUIRE(
    aas::types::KeyTypes::kProperty
    == aas::stringification::MustKeyTypesFromString(
      "Property"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kProperty
    )
    == "Property"
  );

  REQUIRE(
    aas::types::KeyTypes::kRange
    == aas::stringification::MustKeyTypesFromString(
      "Range"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kRange
    )
    == "Range"
  );

  REQUIRE(
    aas::types::KeyTypes::kReferable
    == aas::stringification::MustKeyTypesFromString(
      "Referable"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kReferable
    )
    == "Referable"
  );

  REQUIRE(
    aas::types::KeyTypes::kReferenceElement
    == aas::stringification::MustKeyTypesFromString(
      "ReferenceElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kReferenceElement
    )
    == "ReferenceElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kRelationshipElement
    == aas::stringification::MustKeyTypesFromString(
      "RelationshipElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kRelationshipElement
    )
    == "RelationshipElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kSubmodel
    == aas::stringification::MustKeyTypesFromString(
      "Submodel"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kSubmodel
    )
    == "Submodel"
  );

  REQUIRE(
    aas::types::KeyTypes::kSubmodelElement
    == aas::stringification::MustKeyTypesFromString(
      "SubmodelElement"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kSubmodelElement
    )
    == "SubmodelElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kSubmodelElementCollection
    == aas::stringification::MustKeyTypesFromString(
      "SubmodelElementCollection"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kSubmodelElementCollection
    )
    == "SubmodelElementCollection"
  );

  REQUIRE(
    aas::types::KeyTypes::kSubmodelElementList
    == aas::stringification::MustKeyTypesFromString(
      "SubmodelElementList"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::KeyTypes::kSubmodelElementList
    )
    == "SubmodelElementList"
  );
}

TEST_CASE("Test failure on KeyTypes") {
  CHECK(
    !aas::stringification::KeyTypesFromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustKeyTypesFromString(
      "Totally utterly invalid"
    ),
    "Unexpected KeyTypes literal: Totally utterly invalid"
  );
}

TEST_CASE("Test DataTypeDefXsd round-trip") {
  REQUIRE(
    aas::types::DataTypeDefXsd::kAnyUri
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:anyURI"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kAnyUri
    )
    == "xs:anyURI"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kBase64Binary
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:base64Binary"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kBase64Binary
    )
    == "xs:base64Binary"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kBoolean
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:boolean"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kBoolean
    )
    == "xs:boolean"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kByte
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:byte"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kByte
    )
    == "xs:byte"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kDate
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:date"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kDate
    )
    == "xs:date"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kDateTime
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:dateTime"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kDateTime
    )
    == "xs:dateTime"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kDecimal
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:decimal"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kDecimal
    )
    == "xs:decimal"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kDouble
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:double"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kDouble
    )
    == "xs:double"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kDuration
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:duration"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kDuration
    )
    == "xs:duration"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kFloat
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:float"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kFloat
    )
    == "xs:float"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kGDay
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:gDay"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kGDay
    )
    == "xs:gDay"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kGMonth
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:gMonth"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kGMonth
    )
    == "xs:gMonth"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kGMonthDay
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:gMonthDay"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kGMonthDay
    )
    == "xs:gMonthDay"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kGYear
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:gYear"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kGYear
    )
    == "xs:gYear"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kGYearMonth
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:gYearMonth"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kGYearMonth
    )
    == "xs:gYearMonth"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kHexBinary
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:hexBinary"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kHexBinary
    )
    == "xs:hexBinary"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kInt
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:int"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kInt
    )
    == "xs:int"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kInteger
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:integer"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kInteger
    )
    == "xs:integer"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kLong
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:long"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kLong
    )
    == "xs:long"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kNegativeInteger
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:negativeInteger"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kNegativeInteger
    )
    == "xs:negativeInteger"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kNonNegativeInteger
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:nonNegativeInteger"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kNonNegativeInteger
    )
    == "xs:nonNegativeInteger"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kNonPositiveInteger
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:nonPositiveInteger"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kNonPositiveInteger
    )
    == "xs:nonPositiveInteger"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kPositiveInteger
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:positiveInteger"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kPositiveInteger
    )
    == "xs:positiveInteger"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kShort
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:short"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kShort
    )
    == "xs:short"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kString
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:string"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kString
    )
    == "xs:string"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kTime
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:time"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kTime
    )
    == "xs:time"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kUnsignedByte
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:unsignedByte"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kUnsignedByte
    )
    == "xs:unsignedByte"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kUnsignedInt
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:unsignedInt"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kUnsignedInt
    )
    == "xs:unsignedInt"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kUnsignedLong
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:unsignedLong"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kUnsignedLong
    )
    == "xs:unsignedLong"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kUnsignedShort
    == aas::stringification::MustDataTypeDefXsdFromString(
      "xs:unsignedShort"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeDefXsd::kUnsignedShort
    )
    == "xs:unsignedShort"
  );
}

TEST_CASE("Test failure on DataTypeDefXsd") {
  CHECK(
    !aas::stringification::DataTypeDefXsdFromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustDataTypeDefXsdFromString(
      "Totally utterly invalid"
    ),
    "Unexpected DataTypeDefXsd literal: Totally utterly invalid"
  );
}

TEST_CASE("Test DataTypeIec61360 round-trip") {
  REQUIRE(
    aas::types::DataTypeIec61360::kDate
    == aas::stringification::MustDataTypeIec61360FromString(
      "DATE"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kDate
    )
    == "DATE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kString
    == aas::stringification::MustDataTypeIec61360FromString(
      "STRING"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kString
    )
    == "STRING"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kStringTranslatable
    == aas::stringification::MustDataTypeIec61360FromString(
      "STRING_TRANSLATABLE"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kStringTranslatable
    )
    == "STRING_TRANSLATABLE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kIntegerMeasure
    == aas::stringification::MustDataTypeIec61360FromString(
      "INTEGER_MEASURE"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kIntegerMeasure
    )
    == "INTEGER_MEASURE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kIntegerCount
    == aas::stringification::MustDataTypeIec61360FromString(
      "INTEGER_COUNT"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kIntegerCount
    )
    == "INTEGER_COUNT"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kIntegerCurrency
    == aas::stringification::MustDataTypeIec61360FromString(
      "INTEGER_CURRENCY"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kIntegerCurrency
    )
    == "INTEGER_CURRENCY"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kRealMeasure
    == aas::stringification::MustDataTypeIec61360FromString(
      "REAL_MEASURE"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kRealMeasure
    )
    == "REAL_MEASURE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kRealCount
    == aas::stringification::MustDataTypeIec61360FromString(
      "REAL_COUNT"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kRealCount
    )
    == "REAL_COUNT"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kRealCurrency
    == aas::stringification::MustDataTypeIec61360FromString(
      "REAL_CURRENCY"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kRealCurrency
    )
    == "REAL_CURRENCY"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kBoolean
    == aas::stringification::MustDataTypeIec61360FromString(
      "BOOLEAN"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kBoolean
    )
    == "BOOLEAN"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kIri
    == aas::stringification::MustDataTypeIec61360FromString(
      "IRI"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kIri
    )
    == "IRI"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kIrdi
    == aas::stringification::MustDataTypeIec61360FromString(
      "IRDI"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kIrdi
    )
    == "IRDI"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kRational
    == aas::stringification::MustDataTypeIec61360FromString(
      "RATIONAL"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kRational
    )
    == "RATIONAL"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kRationalMeasure
    == aas::stringification::MustDataTypeIec61360FromString(
      "RATIONAL_MEASURE"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kRationalMeasure
    )
    == "RATIONAL_MEASURE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kTime
    == aas::stringification::MustDataTypeIec61360FromString(
      "TIME"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kTime
    )
    == "TIME"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kTimestamp
    == aas::stringification::MustDataTypeIec61360FromString(
      "TIMESTAMP"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kTimestamp
    )
    == "TIMESTAMP"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kFile
    == aas::stringification::MustDataTypeIec61360FromString(
      "FILE"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kFile
    )
    == "FILE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kHtml
    == aas::stringification::MustDataTypeIec61360FromString(
      "HTML"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kHtml
    )
    == "HTML"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kBlob
    == aas::stringification::MustDataTypeIec61360FromString(
      "BLOB"
    )
  );

  REQUIRE(
    aas::stringification::to_string(
      aas::types::DataTypeIec61360::kBlob
    )
    == "BLOB"
  );
}

TEST_CASE("Test failure on DataTypeIec61360") {
  CHECK(
    !aas::stringification::DataTypeIec61360FromString(
      "Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::stringification::MustDataTypeIec61360FromString(
      "Totally utterly invalid"
    ),
    "Unexpected DataTypeIec61360 literal: Totally utterly invalid"
  );
}

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_stringification_of_enums.py
// Do NOT edit or append.
