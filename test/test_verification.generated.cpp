// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_verification.py
// Do NOT edit or append.

#include "./common.hpp"
#include "./common_xmlization.hpp"

#include <aas_core/aas_3_0/verification.hpp>
#include <aas_core/aas_3_0/xmlization.hpp>

#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

namespace aas = aas_core::aas_3_0;

void AssertNoVerificationError(
  const std::filesystem::path &xml_path
) {
  std::shared_ptr<
    aas::types::IClass
  > instance(
    test::common::xmlization::MustDeserializeFile(xml_path)
  );

  std::vector<std::string> error_messages;
  for (
    const aas::verification::Error &error
    : aas::verification::RecursiveVerification(instance)
  ) {
    error_messages.emplace_back(
      aas::common::Concat(
        aas::common::WstringToUtf8(error.path.ToWstring()),
        ": ",
        aas::common::WstringToUtf8(error.cause)
      )
    );
  }

  if (!error_messages.empty()) {
    std::vector<std::string> parts;
    parts.emplace_back("Expected no error messages from ");
    parts.emplace_back(xml_path.string());
    parts.emplace_back(", but got:\n");
    for (std::string& error_message : error_messages) {
      parts.emplace_back(error_message);
    }

    INFO(test::common::JoinStrings(parts, ""))
    CHECK(error_messages.empty());
  }
}

void AssertOneOrMoreVerificationErrors(
  const std::filesystem::path& xml_path,
  const std::filesystem::path& error_path
) {
  std::shared_ptr<
    aas::types::IClass
  > instance(
    test::common::xmlization::MustDeserializeFile(xml_path)
  );

  std::vector<std::string> error_messages;
  for (
    const aas::verification::Error &error
    :  aas::verification::RecursiveVerification(instance)
  ) {
    error_messages.emplace_back(
      aas::common::Concat(
        aas::common::WstringToUtf8(error.path.ToWstring()),
        ": ",
        aas::common::WstringToUtf8(error.cause)
      )
    );
  }

  if (error_messages.empty()) {
    INFO(
      aas::common::Concat(
        "Expected one or more error messages from ",
        xml_path.string(),
        ", but got none"
      )
    )
    CHECK(!error_messages.empty());
  }

  std::string got = test::common::JoinStrings(error_messages, "\n") + "\n";

  test::common::AssertContentEqualsExpectedOrRecord(got, error_path);
}

const std::filesystem::path& DetermineXmlDir() {
  static aas::common::optional<std::filesystem::path> result;
  if (!result.has_value()) {
    result = test::common::DetermineTestDataDir() / "Xml";
  }

  return *result;
}

const std::filesystem::path& DetermineErrorDir() {
  static aas::common::optional<std::filesystem::path> result;
  if (!result.has_value()) {
    result = test::common::DetermineTestDataDir() / "VerificationError";
  }

  return *result;
}

const std::vector<std::string> kCausesForVerificationFailure = {
  "DateTimeStampUtcViolationOnFebruary29th",
  "MaxLengthViolation",
  "MinLengthViolation",
  "PatternViolation",
  "InvalidValueExample",
  "InvalidMinMaxExample",
  "SetViolation",
  "ConstraintViolation"
};

// NOTE (mristin):
// We test later in the further tests many more values, but the following unit tests
// make the debugging a bit easier.

// region Manual tests

// NOTE (mristin):
// We test later in the further tests many more values, but the following unit tests
// make the debugging a bit easier.

TEST_CASE("Test IsXsDate on a common value") {
  CHECK(aas::verification::IsXsDate(L"2022-04-01-02:00"));
}

TEST_CASE("Test IsXsDate on a large negative year") {
  CHECK(aas::verification::IsXsDate(L"-12345678901234567890123456789012345678901234567890-04-01"));
}

TEST_CASE("Test IsXsDate on a BC 5 as a leap year") {
  CHECK(aas::verification::IsXsDate(L"-0005-02-29"));
}

TEST_CASE("Test IsXsDateTime") {
  CHECK(aas::verification::IsXsDateTime(L"-0811-10-21T24:00:00.000000Z"));
}

TEST_CASE("Test IsXsDouble") {
  CHECK(aas::verification::IsXsDouble(L"+76E-86"));
}

// endregion Manual tests

TEST_CASE("Test verification of a valid Extension") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "extension",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Extension") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "extension",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid AdministrativeInformation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "administrativeInformation",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid AdministrativeInformation") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "administrativeInformation",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Qualifier") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "qualifier",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Qualifier") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "qualifier",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid AssetAdministrationShell") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "assetAdministrationShell",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid AssetAdministrationShell") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "assetAdministrationShell",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid AssetInformation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "assetInformation",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid AssetInformation") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "assetInformation",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Resource") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "resource",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Resource") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "resource",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid SpecificAssetId") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "specificAssetId",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid SpecificAssetId") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "specificAssetId",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Submodel") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodel",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Submodel") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "submodel",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid RelationshipElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "relationshipElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid RelationshipElement") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "relationshipElement",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid SubmodelElementList") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodelElementList",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid SubmodelElementList") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "submodelElementList",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid SubmodelElementCollection") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodelElementCollection",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid SubmodelElementCollection") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "submodelElementCollection",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Property") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "property",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Property") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "property",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid MultiLanguageProperty") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "multiLanguageProperty",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid MultiLanguageProperty") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "multiLanguageProperty",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Range") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "range",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Range") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "range",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid ReferenceElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "referenceElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid ReferenceElement") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "referenceElement",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Blob") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "blob",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Blob") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "blob",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid File") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "file",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid File") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "file",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid AnnotatedRelationshipElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "annotatedRelationshipElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid AnnotatedRelationshipElement") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "annotatedRelationshipElement",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Entity") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "entity",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Entity") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "entity",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid EventPayload") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "SelfContained"
        / "Expected"
        / "eventPayload",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid EventPayload") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "SelfContained"
          / "Unexpected"
          / cause
          / "eventPayload",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid BasicEventElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "basicEventElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid BasicEventElement") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "basicEventElement",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Operation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "operation",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Operation") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "operation",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid OperationVariable") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "operationVariable",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid OperationVariable") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "operationVariable",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Capability") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "capability",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Capability") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "capability",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid ConceptDescription") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "conceptDescription",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid ConceptDescription") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "conceptDescription",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Reference") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "reference",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Reference") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "reference",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Key") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "key",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Key") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "key",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid LangStringNameType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringNameType",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid LangStringNameType") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "langStringNameType",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid LangStringTextType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringTextType",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid LangStringTextType") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "langStringTextType",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid Environment") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "SelfContained"
        / "Expected"
        / "environment",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid Environment") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "SelfContained"
          / "Unexpected"
          / cause
          / "environment",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid EmbeddedDataSpecification") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "embeddedDataSpecification",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid EmbeddedDataSpecification") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "embeddedDataSpecification",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid LevelType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "levelType",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid LevelType") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "levelType",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid ValueReferencePair") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "valueReferencePair",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid ValueReferencePair") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "valueReferencePair",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid ValueList") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "valueList",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid ValueList") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "valueList",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid LangStringPreferredNameTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringPreferredNameTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid LangStringPreferredNameTypeIec61360") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "langStringPreferredNameTypeIec61360",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid LangStringShortNameTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringShortNameTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid LangStringShortNameTypeIec61360") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "langStringShortNameTypeIec61360",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid LangStringDefinitionTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringDefinitionTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid LangStringDefinitionTypeIec61360") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "langStringDefinitionTypeIec61360",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test verification of a valid DataSpecificationIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "dataSpecificationIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of an invalid DataSpecificationIec61360") {
  for (const std::string &cause : kCausesForVerificationFailure) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        DetermineXmlDir()
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "dataSpecificationIec61360",
        ".xml"
      )
    );

    for (const std::filesystem::path &path : paths) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".error")
      );

      AssertOneOrMoreVerificationErrors(
        path,
        error_path
      );
    }
  }
}

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_verification.py
// Do NOT edit or append.
