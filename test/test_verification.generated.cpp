// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_verification.py
// Do NOT edit or append.

#include "./common.hpp"
#include "./common_xmlization.hpp"

#include <aas_core/aas_3_0/verification.hpp>
#include <aas_core/aas_3_0/xmlization.hpp>

#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

namespace aas = aas_core::aas_3_0;

void AssertNoVerificationError(
  const std::filesystem::path& xml_path
) {
  std::shared_ptr<
    aas::types::IClass
  > instance(
    test::common::xmlization::MustDeserializeFile(xml_path)
  );

  std::vector<std::string> error_messages;
  for (
    const aas::verification::Error &error
    : aas::verification::RecursiveVerification(instance)
  ) {
    error_messages.emplace_back(
      aas::common::Concat(
        aas::common::WstringToUtf8(error.path.ToWstring()),
        ": ",
        aas::common::WstringToUtf8(error.cause)
      )
    );
  }

  if (!error_messages.empty()) {
    std::vector<std::string> parts;
    parts.emplace_back("Expected no error messages from ");
    parts.emplace_back(xml_path.string());
    parts.emplace_back(", but got:\n");
    parts.emplace_back(test::common::JoinStrings(error_messages, "\n"));

    INFO(test::common::JoinStrings(parts, ""))
    CHECK(error_messages.empty());
  }
}

const std::filesystem::path& DetermineXmlDir() {
  static aas::common::optional<std::filesystem::path> result;
  if (!result.has_value()) {
    result = test::common::DetermineTestDataDir() / "Xml";
  }

  return *result;
}

const std::filesystem::path& DetermineErrorDir() {
  static aas::common::optional<std::filesystem::path> result;
  if (!result.has_value()) {
    result = test::common::DetermineTestDataDir() / "VerificationError";
  }

  return *result;
}

void AssertVerificationFailure(
  const std::filesystem::path& path,
  const std::filesystem::path& error_path
) {
  std::ifstream ifs(path, std::ios::binary);

  aas::common::expected<
    std::shared_ptr<aas::types::IClass>,
    aas::xmlization::DeserializationError
  > deserialized = aas::xmlization::From(
    ifs
  );

  if (!deserialized.has_value()) {
    INFO(
      aas::common::Concat(
        "Expected to de-serialize ",
        path.string(),
        ", but the de-serialization failed: ",
        aas::common::WstringToUtf8(deserialized.error().path.ToWstring()),
        aas::common::WstringToUtf8(deserialized.error().cause)
      )
    )
    REQUIRE(!deserialized.has_value());
  }

  std::vector<std::string> error_messages;
  for (
    const aas::verification::Error& error
    : aas::verification::RecursiveVerification(deserialized.value())
    ) {
    error_messages.emplace_back(
      aas::common::Concat(
        aas::common::WstringToUtf8(error.path.ToWstring()),
        ": ",
        aas::common::WstringToUtf8(error.cause)
      )
    );
  }

  if (error_messages.empty()) {
    INFO(
      aas::common::Concat(
        "Expected error messages from ",
        path.string(),
        ", but got none"
      )
    )
    REQUIRE(!error_messages.empty());
  }

  const std::string joined_error_messages = test::common::JoinStrings(
    error_messages,
    "\n"
  );

  test::common::AssertContentEqualsExpectedOrRecord(
    joined_error_messages,
    error_path
  );
}

TEST_CASE("Test verification of a valid Extension") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "extension",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Extension") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "extension",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid AdministrativeInformation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "administrativeInformation",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for AdministrativeInformation") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "administrativeInformation",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Qualifier") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "qualifier",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Qualifier") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "qualifier",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid AssetAdministrationShell") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "assetAdministrationShell",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for AssetAdministrationShell") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "assetAdministrationShell",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid AssetInformation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "assetInformation",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for AssetInformation") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "assetInformation",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Resource") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "resource",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Resource") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "resource",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid SpecificAssetId") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "specificAssetId",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for SpecificAssetId") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "specificAssetId",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Submodel") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodel",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Submodel") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "submodel",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid RelationshipElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "relationshipElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for RelationshipElement") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "relationshipElement",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid SubmodelElementList") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodelElementList",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for SubmodelElementList") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "submodelElementList",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid SubmodelElementCollection") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodelElementCollection",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for SubmodelElementCollection") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "submodelElementCollection",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Property") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "property",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Property") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "property",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid MultiLanguageProperty") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "multiLanguageProperty",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for MultiLanguageProperty") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "multiLanguageProperty",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Range") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "range",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Range") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "range",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid ReferenceElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "referenceElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for ReferenceElement") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "referenceElement",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Blob") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "blob",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Blob") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "blob",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid File") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "file",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for File") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "file",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid AnnotatedRelationshipElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "annotatedRelationshipElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for AnnotatedRelationshipElement") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "annotatedRelationshipElement",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Entity") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "entity",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Entity") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "entity",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid EventPayload") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "SelfContained"
        / "Expected"
        / "eventPayload",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for EventPayload") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "SelfContained"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "eventPayload",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid BasicEventElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "basicEventElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for BasicEventElement") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "basicEventElement",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Operation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "operation",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Operation") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "operation",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid OperationVariable") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "operationVariable",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for OperationVariable") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "operationVariable",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Capability") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "capability",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Capability") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "capability",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid ConceptDescription") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "conceptDescription",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for ConceptDescription") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "conceptDescription",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Reference") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "reference",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Reference") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "reference",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Key") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "key",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Key") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "key",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid LangStringNameType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringNameType",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for LangStringNameType") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "langStringNameType",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid LangStringTextType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringTextType",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for LangStringTextType") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "langStringTextType",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid Environment") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "SelfContained"
        / "Expected"
        / "environment",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for Environment") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "SelfContained"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "environment",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid EmbeddedDataSpecification") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "embeddedDataSpecification",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for EmbeddedDataSpecification") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "embeddedDataSpecification",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid LevelType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "levelType",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for LevelType") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "levelType",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid ValueReferencePair") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "valueReferencePair",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for ValueReferencePair") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "valueReferencePair",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid ValueList") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "valueList",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for ValueList") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "valueList",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid LangStringPreferredNameTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringPreferredNameTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for LangStringPreferredNameTypeIec61360") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "langStringPreferredNameTypeIec61360",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid LangStringShortNameTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringShortNameTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for LangStringShortNameTypeIec61360") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "langStringShortNameTypeIec61360",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid LangStringDefinitionTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringDefinitionTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for LangStringDefinitionTypeIec61360") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "langStringDefinitionTypeIec61360",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

TEST_CASE("Test verification of a valid DataSpecificationIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "dataSpecificationIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertNoVerificationError(path);
  }
}

TEST_CASE("Test verification of invalid cases for DataSpecificationIec61360") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Invalid"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "dataSpecificationIec61360",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
            / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
          / (path.filename().string() + ".errors")
      );

      AssertVerificationFailure(path, error_path);
    }
  }
}

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_verification.py
// Do NOT edit or append.
