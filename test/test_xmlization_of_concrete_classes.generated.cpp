// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_xmlization_of_concrete_classes.py
// Do NOT edit or append.

#include "./common.hpp"
#include "./common_xmlization.hpp"

#include <aas_core/aas_3_0/xmlization.hpp>

#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

namespace aas = aas_core::aas_3_0;

void AssertRoundTrip(
  const std::filesystem::path& path
) {
  std::shared_ptr<
    aas::types::IClass
  > deserialized(
    test::common::xmlization::MustDeserializeFile(path)
  );

  std::stringstream ss;
  aas::xmlization::Serialize(*deserialized, {}, ss);

  std::string expected_xml = test::common::MustReadString(path);

  INFO(aas::common::Concat("XML round-trip on ", path.string()))
  REQUIRE(
    test::common::xmlization::CanonicalizeXml(expected_xml)
      == test::common::xmlization::CanonicalizeXml(ss.str())
  );
}

void AssertDeserializationFailure(
  const std::filesystem::path& path,
  const std::filesystem::path& error_path
) {
  std::ifstream ifs(path, std::ios::binary);

  aas::common::expected<
    std::shared_ptr<aas::types::IClass>,
    aas::xmlization::DeserializationError
  > deserialized = aas::xmlization::From(
    ifs
  );

  if (deserialized.has_value()) {
    INFO(
      aas::common::Concat(
        "Expected the de-serialization to fail on ",
        path.string(),
        ", but the de-serialization succeeded"
      )
    )
    REQUIRE(!deserialized.has_value());
  }

  test::common::AssertContentEqualsExpectedOrRecord(
    aas::common::Concat(
      aas::common::WstringToUtf8(
        deserialized.error().path.ToWstring()
      ),
      ": ",
      aas::common::WstringToUtf8(
        deserialized.error().cause
      )
    ),
    error_path
  );
}

const std::filesystem::path& DetermineXmlDir() {
  static aas::common::optional<std::filesystem::path> result;
  if (!result.has_value()) {
    result = test::common::DetermineTestDataDir() / "Xml";
  }

  return *result;
}

const std::filesystem::path& DetermineErrorDir() {
  static aas::common::optional<std::filesystem::path> result;
  if (!result.has_value()) {
    result = test::common::DetermineTestDataDir() / "XmlizationError";
  }

  return *result;
}

TEST_CASE("Test the round-trip of an expected Extension") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "extension",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Extension") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "extension",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected AdministrativeInformation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "administrativeInformation",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected AdministrativeInformation") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "administrativeInformation",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Qualifier") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "qualifier",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Qualifier") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "qualifier",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected AssetAdministrationShell") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "assetAdministrationShell",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected AssetAdministrationShell") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "assetAdministrationShell",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected AssetInformation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "assetInformation",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected AssetInformation") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "assetInformation",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Resource") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "resource",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Resource") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "resource",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected SpecificAssetId") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "specificAssetId",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected SpecificAssetId") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "specificAssetId",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Submodel") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodel",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Submodel") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "submodel",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected RelationshipElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "relationshipElement",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected RelationshipElement") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "relationshipElement",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected SubmodelElementList") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodelElementList",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected SubmodelElementList") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "submodelElementList",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected SubmodelElementCollection") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodelElementCollection",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected SubmodelElementCollection") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "submodelElementCollection",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Property") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "property",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Property") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "property",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected MultiLanguageProperty") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "multiLanguageProperty",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected MultiLanguageProperty") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "multiLanguageProperty",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Range") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "range",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Range") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "range",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected ReferenceElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "referenceElement",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected ReferenceElement") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "referenceElement",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Blob") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "blob",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Blob") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "blob",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected File") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "file",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected File") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "file",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected AnnotatedRelationshipElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "annotatedRelationshipElement",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected AnnotatedRelationshipElement") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "annotatedRelationshipElement",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Entity") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "entity",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Entity") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "entity",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected EventPayload") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "SelfContained"
        / "Expected"
        / "eventPayload",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected EventPayload") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "SelfContained"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "eventPayload",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected BasicEventElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "basicEventElement",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected BasicEventElement") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "basicEventElement",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Operation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "operation",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Operation") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "operation",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected OperationVariable") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "operationVariable",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected OperationVariable") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "operationVariable",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Capability") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "capability",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Capability") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "capability",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected ConceptDescription") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "conceptDescription",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected ConceptDescription") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "conceptDescription",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Reference") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "reference",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Reference") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "reference",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Key") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "key",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Key") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "key",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected LangStringNameType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringNameType",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LangStringNameType") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "langStringNameType",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected LangStringTextType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringTextType",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LangStringTextType") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "langStringTextType",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected Environment") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "SelfContained"
        / "Expected"
        / "environment",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Environment") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "SelfContained"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "environment",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected EmbeddedDataSpecification") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "embeddedDataSpecification",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected EmbeddedDataSpecification") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "embeddedDataSpecification",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected LevelType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "levelType",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LevelType") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "levelType",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected ValueReferencePair") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "valueReferencePair",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected ValueReferencePair") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "valueReferencePair",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected ValueList") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "valueList",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected ValueList") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "valueList",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected LangStringPreferredNameTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringPreferredNameTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LangStringPreferredNameTypeIec61360") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "langStringPreferredNameTypeIec61360",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected LangStringShortNameTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringShortNameTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LangStringShortNameTypeIec61360") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "langStringShortNameTypeIec61360",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected LangStringDefinitionTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringDefinitionTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LangStringDefinitionTypeIec61360") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "langStringDefinitionTypeIec61360",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

TEST_CASE("Test the round-trip of an expected DataSpecificationIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "dataSpecificationIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path &path : paths) {
    AssertRoundTrip(path);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected DataSpecificationIec61360") {
  for (
    const std::filesystem::path& causeDir
    : test::common::ListSubdirectories(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Unexpected"
        / "Unserializable"
    )
  ) {
    for (
      const std::filesystem::path& path
      : test::common::FindFilesBySuffixRecursively(
        causeDir / "dataSpecificationIec61360",
        ".xml"
      )
    ) {
      const std::filesystem::path parent(
        (
          DetermineErrorDir()
          / std::filesystem::relative(path, DetermineXmlDir())
        ).parent_path()
      );

      const std::filesystem::path error_path(
        parent
        / (path.filename().string() + ".error")
      );

      AssertDeserializationFailure(
        path,
        error_path
      );
    }
  }
}

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_xmlization_of_concrete_classes.py
// Do NOT edit or append.
