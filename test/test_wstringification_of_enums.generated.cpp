// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_wstringification_of_enums.py
// Do NOT edit or append.

#include "aas_core/aas_3_0/wstringification.hpp"

#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

namespace aas = aas_core::aas_3_0;

TEST_CASE("Test ModelType round-trip") {
  REQUIRE(
    aas::types::ModelType::kExtension
    == aas::wstringification::MustModelTypeFromWstring(
      L"Extension"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kExtension
    )
    == L"Extension"
  );

  REQUIRE(
    aas::types::ModelType::kAdministrativeInformation
    == aas::wstringification::MustModelTypeFromWstring(
      L"AdministrativeInformation"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kAdministrativeInformation
    )
    == L"AdministrativeInformation"
  );

  REQUIRE(
    aas::types::ModelType::kQualifier
    == aas::wstringification::MustModelTypeFromWstring(
      L"Qualifier"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kQualifier
    )
    == L"Qualifier"
  );

  REQUIRE(
    aas::types::ModelType::kAssetAdministrationShell
    == aas::wstringification::MustModelTypeFromWstring(
      L"AssetAdministrationShell"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kAssetAdministrationShell
    )
    == L"AssetAdministrationShell"
  );

  REQUIRE(
    aas::types::ModelType::kAssetInformation
    == aas::wstringification::MustModelTypeFromWstring(
      L"AssetInformation"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kAssetInformation
    )
    == L"AssetInformation"
  );

  REQUIRE(
    aas::types::ModelType::kResource
    == aas::wstringification::MustModelTypeFromWstring(
      L"Resource"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kResource
    )
    == L"Resource"
  );

  REQUIRE(
    aas::types::ModelType::kSpecificAssetId
    == aas::wstringification::MustModelTypeFromWstring(
      L"SpecificAssetId"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kSpecificAssetId
    )
    == L"SpecificAssetId"
  );

  REQUIRE(
    aas::types::ModelType::kSubmodel
    == aas::wstringification::MustModelTypeFromWstring(
      L"Submodel"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kSubmodel
    )
    == L"Submodel"
  );

  REQUIRE(
    aas::types::ModelType::kRelationshipElement
    == aas::wstringification::MustModelTypeFromWstring(
      L"RelationshipElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kRelationshipElement
    )
    == L"RelationshipElement"
  );

  REQUIRE(
    aas::types::ModelType::kSubmodelElementList
    == aas::wstringification::MustModelTypeFromWstring(
      L"SubmodelElementList"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kSubmodelElementList
    )
    == L"SubmodelElementList"
  );

  REQUIRE(
    aas::types::ModelType::kSubmodelElementCollection
    == aas::wstringification::MustModelTypeFromWstring(
      L"SubmodelElementCollection"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kSubmodelElementCollection
    )
    == L"SubmodelElementCollection"
  );

  REQUIRE(
    aas::types::ModelType::kProperty
    == aas::wstringification::MustModelTypeFromWstring(
      L"Property"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kProperty
    )
    == L"Property"
  );

  REQUIRE(
    aas::types::ModelType::kMultiLanguageProperty
    == aas::wstringification::MustModelTypeFromWstring(
      L"MultiLanguageProperty"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kMultiLanguageProperty
    )
    == L"MultiLanguageProperty"
  );

  REQUIRE(
    aas::types::ModelType::kRange
    == aas::wstringification::MustModelTypeFromWstring(
      L"Range"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kRange
    )
    == L"Range"
  );

  REQUIRE(
    aas::types::ModelType::kReferenceElement
    == aas::wstringification::MustModelTypeFromWstring(
      L"ReferenceElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kReferenceElement
    )
    == L"ReferenceElement"
  );

  REQUIRE(
    aas::types::ModelType::kBlob
    == aas::wstringification::MustModelTypeFromWstring(
      L"Blob"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kBlob
    )
    == L"Blob"
  );

  REQUIRE(
    aas::types::ModelType::kFile
    == aas::wstringification::MustModelTypeFromWstring(
      L"File"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kFile
    )
    == L"File"
  );

  REQUIRE(
    aas::types::ModelType::kAnnotatedRelationshipElement
    == aas::wstringification::MustModelTypeFromWstring(
      L"AnnotatedRelationshipElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kAnnotatedRelationshipElement
    )
    == L"AnnotatedRelationshipElement"
  );

  REQUIRE(
    aas::types::ModelType::kEntity
    == aas::wstringification::MustModelTypeFromWstring(
      L"Entity"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kEntity
    )
    == L"Entity"
  );

  REQUIRE(
    aas::types::ModelType::kEventPayload
    == aas::wstringification::MustModelTypeFromWstring(
      L"EventPayload"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kEventPayload
    )
    == L"EventPayload"
  );

  REQUIRE(
    aas::types::ModelType::kBasicEventElement
    == aas::wstringification::MustModelTypeFromWstring(
      L"BasicEventElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kBasicEventElement
    )
    == L"BasicEventElement"
  );

  REQUIRE(
    aas::types::ModelType::kOperation
    == aas::wstringification::MustModelTypeFromWstring(
      L"Operation"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kOperation
    )
    == L"Operation"
  );

  REQUIRE(
    aas::types::ModelType::kOperationVariable
    == aas::wstringification::MustModelTypeFromWstring(
      L"OperationVariable"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kOperationVariable
    )
    == L"OperationVariable"
  );

  REQUIRE(
    aas::types::ModelType::kCapability
    == aas::wstringification::MustModelTypeFromWstring(
      L"Capability"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kCapability
    )
    == L"Capability"
  );

  REQUIRE(
    aas::types::ModelType::kConceptDescription
    == aas::wstringification::MustModelTypeFromWstring(
      L"ConceptDescription"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kConceptDescription
    )
    == L"ConceptDescription"
  );

  REQUIRE(
    aas::types::ModelType::kReference
    == aas::wstringification::MustModelTypeFromWstring(
      L"Reference"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kReference
    )
    == L"Reference"
  );

  REQUIRE(
    aas::types::ModelType::kKey
    == aas::wstringification::MustModelTypeFromWstring(
      L"Key"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kKey
    )
    == L"Key"
  );

  REQUIRE(
    aas::types::ModelType::kLangStringNameType
    == aas::wstringification::MustModelTypeFromWstring(
      L"LangStringNameType"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kLangStringNameType
    )
    == L"LangStringNameType"
  );

  REQUIRE(
    aas::types::ModelType::kLangStringTextType
    == aas::wstringification::MustModelTypeFromWstring(
      L"LangStringTextType"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kLangStringTextType
    )
    == L"LangStringTextType"
  );

  REQUIRE(
    aas::types::ModelType::kEnvironment
    == aas::wstringification::MustModelTypeFromWstring(
      L"Environment"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kEnvironment
    )
    == L"Environment"
  );

  REQUIRE(
    aas::types::ModelType::kEmbeddedDataSpecification
    == aas::wstringification::MustModelTypeFromWstring(
      L"EmbeddedDataSpecification"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kEmbeddedDataSpecification
    )
    == L"EmbeddedDataSpecification"
  );

  REQUIRE(
    aas::types::ModelType::kLevelType
    == aas::wstringification::MustModelTypeFromWstring(
      L"LevelType"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kLevelType
    )
    == L"LevelType"
  );

  REQUIRE(
    aas::types::ModelType::kValueReferencePair
    == aas::wstringification::MustModelTypeFromWstring(
      L"ValueReferencePair"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kValueReferencePair
    )
    == L"ValueReferencePair"
  );

  REQUIRE(
    aas::types::ModelType::kValueList
    == aas::wstringification::MustModelTypeFromWstring(
      L"ValueList"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kValueList
    )
    == L"ValueList"
  );

  REQUIRE(
    aas::types::ModelType::kLangStringPreferredNameTypeIec61360
    == aas::wstringification::MustModelTypeFromWstring(
      L"LangStringPreferredNameTypeIec61360"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kLangStringPreferredNameTypeIec61360
    )
    == L"LangStringPreferredNameTypeIec61360"
  );

  REQUIRE(
    aas::types::ModelType::kLangStringShortNameTypeIec61360
    == aas::wstringification::MustModelTypeFromWstring(
      L"LangStringShortNameTypeIec61360"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kLangStringShortNameTypeIec61360
    )
    == L"LangStringShortNameTypeIec61360"
  );

  REQUIRE(
    aas::types::ModelType::kLangStringDefinitionTypeIec61360
    == aas::wstringification::MustModelTypeFromWstring(
      L"LangStringDefinitionTypeIec61360"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kLangStringDefinitionTypeIec61360
    )
    == L"LangStringDefinitionTypeIec61360"
  );

  REQUIRE(
    aas::types::ModelType::kDataSpecificationIec61360
    == aas::wstringification::MustModelTypeFromWstring(
      L"DataSpecificationIec61360"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModelType::kDataSpecificationIec61360
    )
    == L"DataSpecificationIec61360"
  );
}

TEST_CASE("Test failure on ModelType") {
  CHECK(
    !aas::wstringification::ModelTypeFromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustModelTypeFromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected ModelType literal: Totally utterly invalid"
  );
}

TEST_CASE("Test ModellingKind round-trip") {
  REQUIRE(
    aas::types::ModellingKind::kTemplate
    == aas::wstringification::MustModellingKindFromWstring(
      L"Template"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModellingKind::kTemplate
    )
    == L"Template"
  );

  REQUIRE(
    aas::types::ModellingKind::kInstance
    == aas::wstringification::MustModellingKindFromWstring(
      L"Instance"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ModellingKind::kInstance
    )
    == L"Instance"
  );
}

TEST_CASE("Test failure on ModellingKind") {
  CHECK(
    !aas::wstringification::ModellingKindFromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustModellingKindFromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected ModellingKind literal: Totally utterly invalid"
  );
}

TEST_CASE("Test QualifierKind round-trip") {
  REQUIRE(
    aas::types::QualifierKind::kValueQualifier
    == aas::wstringification::MustQualifierKindFromWstring(
      L"ValueQualifier"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::QualifierKind::kValueQualifier
    )
    == L"ValueQualifier"
  );

  REQUIRE(
    aas::types::QualifierKind::kConceptQualifier
    == aas::wstringification::MustQualifierKindFromWstring(
      L"ConceptQualifier"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::QualifierKind::kConceptQualifier
    )
    == L"ConceptQualifier"
  );

  REQUIRE(
    aas::types::QualifierKind::kTemplateQualifier
    == aas::wstringification::MustQualifierKindFromWstring(
      L"TemplateQualifier"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::QualifierKind::kTemplateQualifier
    )
    == L"TemplateQualifier"
  );
}

TEST_CASE("Test failure on QualifierKind") {
  CHECK(
    !aas::wstringification::QualifierKindFromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustQualifierKindFromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected QualifierKind literal: Totally utterly invalid"
  );
}

TEST_CASE("Test AssetKind round-trip") {
  REQUIRE(
    aas::types::AssetKind::kType
    == aas::wstringification::MustAssetKindFromWstring(
      L"Type"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AssetKind::kType
    )
    == L"Type"
  );

  REQUIRE(
    aas::types::AssetKind::kInstance
    == aas::wstringification::MustAssetKindFromWstring(
      L"Instance"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AssetKind::kInstance
    )
    == L"Instance"
  );

  REQUIRE(
    aas::types::AssetKind::kNotApplicable
    == aas::wstringification::MustAssetKindFromWstring(
      L"NotApplicable"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AssetKind::kNotApplicable
    )
    == L"NotApplicable"
  );
}

TEST_CASE("Test failure on AssetKind") {
  CHECK(
    !aas::wstringification::AssetKindFromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustAssetKindFromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected AssetKind literal: Totally utterly invalid"
  );
}

TEST_CASE("Test AasSubmodelElements round-trip") {
  REQUIRE(
    aas::types::AasSubmodelElements::kAnnotatedRelationshipElement
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"AnnotatedRelationshipElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kAnnotatedRelationshipElement
    )
    == L"AnnotatedRelationshipElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kBasicEventElement
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"BasicEventElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kBasicEventElement
    )
    == L"BasicEventElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kBlob
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"Blob"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kBlob
    )
    == L"Blob"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kCapability
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"Capability"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kCapability
    )
    == L"Capability"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kDataElement
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"DataElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kDataElement
    )
    == L"DataElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kEntity
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"Entity"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kEntity
    )
    == L"Entity"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kEventElement
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"EventElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kEventElement
    )
    == L"EventElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kFile
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"File"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kFile
    )
    == L"File"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kMultiLanguageProperty
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"MultiLanguageProperty"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kMultiLanguageProperty
    )
    == L"MultiLanguageProperty"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kOperation
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"Operation"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kOperation
    )
    == L"Operation"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kProperty
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"Property"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kProperty
    )
    == L"Property"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kRange
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"Range"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kRange
    )
    == L"Range"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kReferenceElement
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"ReferenceElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kReferenceElement
    )
    == L"ReferenceElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kRelationshipElement
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"RelationshipElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kRelationshipElement
    )
    == L"RelationshipElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kSubmodelElement
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"SubmodelElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kSubmodelElement
    )
    == L"SubmodelElement"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kSubmodelElementList
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"SubmodelElementList"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kSubmodelElementList
    )
    == L"SubmodelElementList"
  );

  REQUIRE(
    aas::types::AasSubmodelElements::kSubmodelElementCollection
    == aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"SubmodelElementCollection"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::AasSubmodelElements::kSubmodelElementCollection
    )
    == L"SubmodelElementCollection"
  );
}

TEST_CASE("Test failure on AasSubmodelElements") {
  CHECK(
    !aas::wstringification::AasSubmodelElementsFromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustAasSubmodelElementsFromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected AasSubmodelElements literal: Totally utterly invalid"
  );
}

TEST_CASE("Test EntityType round-trip") {
  REQUIRE(
    aas::types::EntityType::kCoManagedEntity
    == aas::wstringification::MustEntityTypeFromWstring(
      L"CoManagedEntity"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::EntityType::kCoManagedEntity
    )
    == L"CoManagedEntity"
  );

  REQUIRE(
    aas::types::EntityType::kSelfManagedEntity
    == aas::wstringification::MustEntityTypeFromWstring(
      L"SelfManagedEntity"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::EntityType::kSelfManagedEntity
    )
    == L"SelfManagedEntity"
  );
}

TEST_CASE("Test failure on EntityType") {
  CHECK(
    !aas::wstringification::EntityTypeFromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustEntityTypeFromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected EntityType literal: Totally utterly invalid"
  );
}

TEST_CASE("Test Direction round-trip") {
  REQUIRE(
    aas::types::Direction::kInput
    == aas::wstringification::MustDirectionFromWstring(
      L"input"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::Direction::kInput
    )
    == L"input"
  );

  REQUIRE(
    aas::types::Direction::kOutput
    == aas::wstringification::MustDirectionFromWstring(
      L"output"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::Direction::kOutput
    )
    == L"output"
  );
}

TEST_CASE("Test failure on Direction") {
  CHECK(
    !aas::wstringification::DirectionFromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustDirectionFromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected Direction literal: Totally utterly invalid"
  );
}

TEST_CASE("Test StateOfEvent round-trip") {
  REQUIRE(
    aas::types::StateOfEvent::kOn
    == aas::wstringification::MustStateOfEventFromWstring(
      L"on"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::StateOfEvent::kOn
    )
    == L"on"
  );

  REQUIRE(
    aas::types::StateOfEvent::kOff
    == aas::wstringification::MustStateOfEventFromWstring(
      L"off"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::StateOfEvent::kOff
    )
    == L"off"
  );
}

TEST_CASE("Test failure on StateOfEvent") {
  CHECK(
    !aas::wstringification::StateOfEventFromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustStateOfEventFromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected StateOfEvent literal: Totally utterly invalid"
  );
}

TEST_CASE("Test ReferenceTypes round-trip") {
  REQUIRE(
    aas::types::ReferenceTypes::kExternalReference
    == aas::wstringification::MustReferenceTypesFromWstring(
      L"ExternalReference"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ReferenceTypes::kExternalReference
    )
    == L"ExternalReference"
  );

  REQUIRE(
    aas::types::ReferenceTypes::kModelReference
    == aas::wstringification::MustReferenceTypesFromWstring(
      L"ModelReference"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::ReferenceTypes::kModelReference
    )
    == L"ModelReference"
  );
}

TEST_CASE("Test failure on ReferenceTypes") {
  CHECK(
    !aas::wstringification::ReferenceTypesFromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustReferenceTypesFromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected ReferenceTypes literal: Totally utterly invalid"
  );
}

TEST_CASE("Test KeyTypes round-trip") {
  REQUIRE(
    aas::types::KeyTypes::kAnnotatedRelationshipElement
    == aas::wstringification::MustKeyTypesFromWstring(
      L"AnnotatedRelationshipElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kAnnotatedRelationshipElement
    )
    == L"AnnotatedRelationshipElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kAssetAdministrationShell
    == aas::wstringification::MustKeyTypesFromWstring(
      L"AssetAdministrationShell"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kAssetAdministrationShell
    )
    == L"AssetAdministrationShell"
  );

  REQUIRE(
    aas::types::KeyTypes::kBasicEventElement
    == aas::wstringification::MustKeyTypesFromWstring(
      L"BasicEventElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kBasicEventElement
    )
    == L"BasicEventElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kBlob
    == aas::wstringification::MustKeyTypesFromWstring(
      L"Blob"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kBlob
    )
    == L"Blob"
  );

  REQUIRE(
    aas::types::KeyTypes::kCapability
    == aas::wstringification::MustKeyTypesFromWstring(
      L"Capability"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kCapability
    )
    == L"Capability"
  );

  REQUIRE(
    aas::types::KeyTypes::kConceptDescription
    == aas::wstringification::MustKeyTypesFromWstring(
      L"ConceptDescription"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kConceptDescription
    )
    == L"ConceptDescription"
  );

  REQUIRE(
    aas::types::KeyTypes::kDataElement
    == aas::wstringification::MustKeyTypesFromWstring(
      L"DataElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kDataElement
    )
    == L"DataElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kEntity
    == aas::wstringification::MustKeyTypesFromWstring(
      L"Entity"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kEntity
    )
    == L"Entity"
  );

  REQUIRE(
    aas::types::KeyTypes::kEventElement
    == aas::wstringification::MustKeyTypesFromWstring(
      L"EventElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kEventElement
    )
    == L"EventElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kFile
    == aas::wstringification::MustKeyTypesFromWstring(
      L"File"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kFile
    )
    == L"File"
  );

  REQUIRE(
    aas::types::KeyTypes::kFragmentReference
    == aas::wstringification::MustKeyTypesFromWstring(
      L"FragmentReference"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kFragmentReference
    )
    == L"FragmentReference"
  );

  REQUIRE(
    aas::types::KeyTypes::kGlobalReference
    == aas::wstringification::MustKeyTypesFromWstring(
      L"GlobalReference"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kGlobalReference
    )
    == L"GlobalReference"
  );

  REQUIRE(
    aas::types::KeyTypes::kIdentifiable
    == aas::wstringification::MustKeyTypesFromWstring(
      L"Identifiable"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kIdentifiable
    )
    == L"Identifiable"
  );

  REQUIRE(
    aas::types::KeyTypes::kMultiLanguageProperty
    == aas::wstringification::MustKeyTypesFromWstring(
      L"MultiLanguageProperty"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kMultiLanguageProperty
    )
    == L"MultiLanguageProperty"
  );

  REQUIRE(
    aas::types::KeyTypes::kOperation
    == aas::wstringification::MustKeyTypesFromWstring(
      L"Operation"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kOperation
    )
    == L"Operation"
  );

  REQUIRE(
    aas::types::KeyTypes::kProperty
    == aas::wstringification::MustKeyTypesFromWstring(
      L"Property"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kProperty
    )
    == L"Property"
  );

  REQUIRE(
    aas::types::KeyTypes::kRange
    == aas::wstringification::MustKeyTypesFromWstring(
      L"Range"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kRange
    )
    == L"Range"
  );

  REQUIRE(
    aas::types::KeyTypes::kReferable
    == aas::wstringification::MustKeyTypesFromWstring(
      L"Referable"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kReferable
    )
    == L"Referable"
  );

  REQUIRE(
    aas::types::KeyTypes::kReferenceElement
    == aas::wstringification::MustKeyTypesFromWstring(
      L"ReferenceElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kReferenceElement
    )
    == L"ReferenceElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kRelationshipElement
    == aas::wstringification::MustKeyTypesFromWstring(
      L"RelationshipElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kRelationshipElement
    )
    == L"RelationshipElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kSubmodel
    == aas::wstringification::MustKeyTypesFromWstring(
      L"Submodel"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kSubmodel
    )
    == L"Submodel"
  );

  REQUIRE(
    aas::types::KeyTypes::kSubmodelElement
    == aas::wstringification::MustKeyTypesFromWstring(
      L"SubmodelElement"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kSubmodelElement
    )
    == L"SubmodelElement"
  );

  REQUIRE(
    aas::types::KeyTypes::kSubmodelElementCollection
    == aas::wstringification::MustKeyTypesFromWstring(
      L"SubmodelElementCollection"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kSubmodelElementCollection
    )
    == L"SubmodelElementCollection"
  );

  REQUIRE(
    aas::types::KeyTypes::kSubmodelElementList
    == aas::wstringification::MustKeyTypesFromWstring(
      L"SubmodelElementList"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::KeyTypes::kSubmodelElementList
    )
    == L"SubmodelElementList"
  );
}

TEST_CASE("Test failure on KeyTypes") {
  CHECK(
    !aas::wstringification::KeyTypesFromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustKeyTypesFromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected KeyTypes literal: Totally utterly invalid"
  );
}

TEST_CASE("Test DataTypeDefXsd round-trip") {
  REQUIRE(
    aas::types::DataTypeDefXsd::kAnyUri
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:anyURI"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kAnyUri
    )
    == L"xs:anyURI"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kBase64Binary
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:base64Binary"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kBase64Binary
    )
    == L"xs:base64Binary"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kBoolean
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:boolean"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kBoolean
    )
    == L"xs:boolean"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kByte
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:byte"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kByte
    )
    == L"xs:byte"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kDate
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:date"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kDate
    )
    == L"xs:date"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kDateTime
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:dateTime"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kDateTime
    )
    == L"xs:dateTime"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kDecimal
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:decimal"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kDecimal
    )
    == L"xs:decimal"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kDouble
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:double"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kDouble
    )
    == L"xs:double"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kDuration
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:duration"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kDuration
    )
    == L"xs:duration"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kFloat
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:float"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kFloat
    )
    == L"xs:float"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kGDay
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:gDay"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kGDay
    )
    == L"xs:gDay"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kGMonth
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:gMonth"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kGMonth
    )
    == L"xs:gMonth"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kGMonthDay
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:gMonthDay"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kGMonthDay
    )
    == L"xs:gMonthDay"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kGYear
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:gYear"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kGYear
    )
    == L"xs:gYear"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kGYearMonth
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:gYearMonth"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kGYearMonth
    )
    == L"xs:gYearMonth"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kHexBinary
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:hexBinary"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kHexBinary
    )
    == L"xs:hexBinary"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kInt
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:int"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kInt
    )
    == L"xs:int"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kInteger
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:integer"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kInteger
    )
    == L"xs:integer"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kLong
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:long"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kLong
    )
    == L"xs:long"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kNegativeInteger
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:negativeInteger"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kNegativeInteger
    )
    == L"xs:negativeInteger"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kNonNegativeInteger
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:nonNegativeInteger"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kNonNegativeInteger
    )
    == L"xs:nonNegativeInteger"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kNonPositiveInteger
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:nonPositiveInteger"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kNonPositiveInteger
    )
    == L"xs:nonPositiveInteger"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kPositiveInteger
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:positiveInteger"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kPositiveInteger
    )
    == L"xs:positiveInteger"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kShort
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:short"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kShort
    )
    == L"xs:short"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kString
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:string"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kString
    )
    == L"xs:string"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kTime
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:time"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kTime
    )
    == L"xs:time"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kUnsignedByte
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:unsignedByte"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kUnsignedByte
    )
    == L"xs:unsignedByte"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kUnsignedInt
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:unsignedInt"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kUnsignedInt
    )
    == L"xs:unsignedInt"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kUnsignedLong
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:unsignedLong"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kUnsignedLong
    )
    == L"xs:unsignedLong"
  );

  REQUIRE(
    aas::types::DataTypeDefXsd::kUnsignedShort
    == aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"xs:unsignedShort"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeDefXsd::kUnsignedShort
    )
    == L"xs:unsignedShort"
  );
}

TEST_CASE("Test failure on DataTypeDefXsd") {
  CHECK(
    !aas::wstringification::DataTypeDefXsdFromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustDataTypeDefXsdFromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected DataTypeDefXsd literal: Totally utterly invalid"
  );
}

TEST_CASE("Test DataTypeIec61360 round-trip") {
  REQUIRE(
    aas::types::DataTypeIec61360::kDate
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"DATE"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kDate
    )
    == L"DATE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kString
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"STRING"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kString
    )
    == L"STRING"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kStringTranslatable
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"STRING_TRANSLATABLE"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kStringTranslatable
    )
    == L"STRING_TRANSLATABLE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kIntegerMeasure
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"INTEGER_MEASURE"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kIntegerMeasure
    )
    == L"INTEGER_MEASURE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kIntegerCount
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"INTEGER_COUNT"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kIntegerCount
    )
    == L"INTEGER_COUNT"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kIntegerCurrency
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"INTEGER_CURRENCY"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kIntegerCurrency
    )
    == L"INTEGER_CURRENCY"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kRealMeasure
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"REAL_MEASURE"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kRealMeasure
    )
    == L"REAL_MEASURE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kRealCount
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"REAL_COUNT"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kRealCount
    )
    == L"REAL_COUNT"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kRealCurrency
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"REAL_CURRENCY"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kRealCurrency
    )
    == L"REAL_CURRENCY"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kBoolean
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"BOOLEAN"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kBoolean
    )
    == L"BOOLEAN"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kIri
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"IRI"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kIri
    )
    == L"IRI"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kIrdi
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"IRDI"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kIrdi
    )
    == L"IRDI"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kRational
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"RATIONAL"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kRational
    )
    == L"RATIONAL"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kRationalMeasure
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"RATIONAL_MEASURE"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kRationalMeasure
    )
    == L"RATIONAL_MEASURE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kTime
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"TIME"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kTime
    )
    == L"TIME"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kTimestamp
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"TIMESTAMP"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kTimestamp
    )
    == L"TIMESTAMP"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kFile
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"FILE"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kFile
    )
    == L"FILE"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kHtml
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"HTML"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kHtml
    )
    == L"HTML"
  );

  REQUIRE(
    aas::types::DataTypeIec61360::kBlob
    == aas::wstringification::MustDataTypeIec61360FromWstring(
      L"BLOB"
    )
  );

  REQUIRE(
    aas::wstringification::to_wstring(
      aas::types::DataTypeIec61360::kBlob
    )
    == L"BLOB"
  );
}

TEST_CASE("Test failure on DataTypeIec61360") {
  CHECK(
    !aas::wstringification::DataTypeIec61360FromWstring(
      L"Totally utterly invalid"
    ).has_value()
  );

  REQUIRE_THROWS_WITH(
    aas::wstringification::MustDataTypeIec61360FromWstring(
      L"Totally utterly invalid"
    ),
    "Unexpected DataTypeIec61360 literal: Totally utterly invalid"
  );
}

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_wstringification_of_enums.py
// Do NOT edit or append.
