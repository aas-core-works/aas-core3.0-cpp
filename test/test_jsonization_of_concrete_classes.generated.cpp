// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_jsonization_of_concrete_classes.py
// Do NOT edit or append.

#include "./common.hpp"
#include "./common_jsonization.hpp"

#include <aas_core/aas_3_0/jsonization.hpp>

#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

namespace aas = aas_core::aas_3_0;

template<class ClassT>
void AssertRoundTrip(
  const std::filesystem::path& path,
  std::function<
    aas::common::expected<
      std::shared_ptr<ClassT>,
      aas::jsonization::DeserializationError
    >(const nlohmann::json&, bool)
  > deserialization_function
) {
  const nlohmann::json json = test::common::jsonization::MustReadJson(path);

  aas::common::expected<
    std::shared_ptr<ClassT>,
    aas::jsonization::DeserializationError
  > deserialized = deserialization_function(json, false);

  if (!deserialized.has_value()) {
    INFO(
      aas::common::Concat(
        "Failed to de-serialize from ",
        path.string(),
        ": ",
        aas::common::WstringToUtf8(
          deserialized.error().path.ToWstring()
        ),
        ": ",
        aas::common::WstringToUtf8(
          deserialized.error().cause
        )
      )
    )
    REQUIRE(deserialized.has_value());
  }

  nlohmann::json another_json = aas::jsonization::Serialize(
    *(deserialized.value())
  );

  std::optional<std::string> diff_message = test::common::jsonization::CompareJsons(
    json,
    another_json
  );
  if (diff_message.has_value()) {
    INFO(
      aas::common::Concat(
        "The JSON round-trip from ",
        path.string(),
        " failed. There is a diff between the original JSON "
        "and the serialized one: ",
        *diff_message
      )
    )
    REQUIRE(!diff_message.has_value());
  }
}

template<typename ClassT>
void AssertDeserializationFailure(
  const std::filesystem::path& path,
  std::function<
    aas::common::expected<
      std::shared_ptr<ClassT>,
      aas::jsonization::DeserializationError
    >(const nlohmann::json&, bool)
  > deserialization_function
) {
  const nlohmann::json json = test::common::jsonization::MustReadJson(path);

  aas::common::expected<
    std::shared_ptr<ClassT>,
    aas::jsonization::DeserializationError
  > deserialized = deserialization_function(json, false);

  if (deserialized.has_value()) {
    INFO(
      aas::common::Concat(
        "Expected the de-serialization to fail on ",
        path.string(),
        ", but the de-serialization succeeded"
      )
    )
    REQUIRE(!deserialized.has_value());
  }

  const std::filesystem::path error_path(
    path.parent_path()
      / (path.filename().string() + ".error")
  );

  test::common::AssertContentEqualsExpectedOrRecord(
    aas::common::Concat(
      aas::common::WstringToUtf8(
        deserialized.error().path.ToWstring()
      ),
      ": ",
      aas::common::WstringToUtf8(
        deserialized.error().cause
      )
    ),
    error_path
  );
}

TEST_CASE("Test the round-trip of an expected Extension") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Extension",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Extension") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Extension",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected AdministrativeInformation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AdministrativeInformation",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected AdministrativeInformation") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "AdministrativeInformation",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Qualifier") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Qualifier",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Qualifier") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Qualifier",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected AssetAdministrationShell") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AssetAdministrationShell",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected AssetAdministrationShell") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "AssetAdministrationShell",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected AssetInformation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AssetInformation",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected AssetInformation") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "AssetInformation",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Resource") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Resource",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Resource") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Resource",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected SpecificAssetId") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "SpecificAssetId",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected SpecificAssetId") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "SpecificAssetId",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Submodel") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Submodel",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Submodel") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Submodel",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected RelationshipElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "RelationshipElement",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected RelationshipElement") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "RelationshipElement",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected SubmodelElementList") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "SubmodelElementList",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected SubmodelElementList") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "SubmodelElementList",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected SubmodelElementCollection") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "SubmodelElementCollection",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected SubmodelElementCollection") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "SubmodelElementCollection",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Property") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Property",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Property") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Property",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected MultiLanguageProperty") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "MultiLanguageProperty",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected MultiLanguageProperty") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "MultiLanguageProperty",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Range") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Range",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Range") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Range",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected ReferenceElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ReferenceElement",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected ReferenceElement") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "ReferenceElement",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Blob") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Blob",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Blob") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Blob",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected File") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "File",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected File") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "File",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected AnnotatedRelationshipElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "AnnotatedRelationshipElement",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected AnnotatedRelationshipElement") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "AnnotatedRelationshipElement",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Entity") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Entity",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Entity") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Entity",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected EventPayload") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "SelfContained"
        / "Expected"
        / "EventPayload",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEventPayload
    >(path, aas::jsonization::EventPayloadFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected EventPayload") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "SelfContained"
          / "Unexpected"
          / cause
          / "EventPayload",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEventPayload
      >(path, aas::jsonization::EventPayloadFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected BasicEventElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "BasicEventElement",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected BasicEventElement") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "BasicEventElement",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Operation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Operation",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Operation") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Operation",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected OperationVariable") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "OperationVariable",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected OperationVariable") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "OperationVariable",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Capability") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Capability",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Capability") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Capability",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected ConceptDescription") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ConceptDescription",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected ConceptDescription") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "ConceptDescription",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Reference") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Reference",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Reference") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Reference",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Key") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "Key",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Key") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "Key",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected LangStringNameType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "LangStringNameType",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LangStringNameType") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "LangStringNameType",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected LangStringTextType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "LangStringTextType",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LangStringTextType") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "LangStringTextType",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected Environment") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "SelfContained"
        / "Expected"
        / "Environment",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected Environment") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "SelfContained"
          / "Unexpected"
          / cause
          / "Environment",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected EmbeddedDataSpecification") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "EmbeddedDataSpecification",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected EmbeddedDataSpecification") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "EmbeddedDataSpecification",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected LevelType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "LevelType",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LevelType") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "LevelType",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected ValueReferencePair") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ValueReferencePair",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected ValueReferencePair") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "ValueReferencePair",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected ValueList") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "ValueList",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected ValueList") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "ValueList",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected LangStringPreferredNameTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "LangStringPreferredNameTypeIec61360",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LangStringPreferredNameTypeIec61360") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "LangStringPreferredNameTypeIec61360",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected LangStringShortNameTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "LangStringShortNameTypeIec61360",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LangStringShortNameTypeIec61360") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "LangStringShortNameTypeIec61360",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected LangStringDefinitionTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "LangStringDefinitionTypeIec61360",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected LangStringDefinitionTypeIec61360") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "LangStringDefinitionTypeIec61360",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

TEST_CASE("Test the round-trip of an expected DataSpecificationIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      test::common::DetermineTestDataDir()
        / "Json"
        / "ContainedInEnvironment"
        / "Expected"
        / "DataSpecificationIec61360",
      ".json"
    )
  );

  for (const std::filesystem::path& path : paths) {
    AssertRoundTrip<
      aas::types::IEnvironment
    >(path, aas::jsonization::EnvironmentFrom);
  }
}

TEST_CASE("Test the de-serialization failure on an unexpected DataSpecificationIec61360") {
  for (
    const std::string& cause
    : test::common::jsonization::kCausesForDeserializationFailure
  ) {
    const std::deque<std::filesystem::path> paths(
      test::common::FindFilesBySuffixRecursively(
        test::common::DetermineTestDataDir()
          / "Json"
          / "ContainedInEnvironment"
          / "Unexpected"
          / cause
          / "DataSpecificationIec61360",
        ".json"
      )
    );

    for (const std::filesystem::path& path : paths) {
      AssertDeserializationFailure<
        aas::types::IEnvironment
      >(path, aas::jsonization::EnvironmentFrom);
    }
  }
}

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_jsonization_of_concrete_classes.py
// Do NOT edit or append.
