// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_descent_and_descent_once.py
// Do NOT edit or append.

#include "./common.hpp"
#include "./common_examples.generated.hpp"
#include "./common_xmlization.hpp"

#include <aas_core/aas_3_0/iteration.hpp>
#include <aas_core/aas_3_0/stringification.hpp>
#include <aas_core/aas_3_0/types.hpp>

#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

#include <deque>

namespace aas = aas_core::aas_3_0;

const std::filesystem::path& DetermineXmlDir() {
  static aas::common::optional<std::filesystem::path> result;
  if (!result.has_value()) {
    result = test::common::DetermineTestDataDir() / "Xml";
  }

  return *result;
}

const std::filesystem::path& DetermineDescentDir() {
  static aas::common::optional<std::filesystem::path> result;
  if (!result.has_value()) {
    result = test::common::DetermineTestDataDir() / "Descent";
  }

  return *result;
}

const std::filesystem::path& DetermineDescentOnceDir() {
  static aas::common::optional<std::filesystem::path> result;
  if (!result.has_value()) {
    result = test::common::DetermineTestDataDir() / "DescentOnce";
  }

  return *result;
}

void AssertOrRerecordDescent(
  const std::filesystem::path& xml_path,
  const std::filesystem::path& trace_path
) {
  std::shared_ptr<
    aas::types::IClass
  > instance(
    test::common::xmlization::MustDeserializeFile(xml_path)
  );

  std::deque<std::wstring> parts;

  for (
    const std::shared_ptr<aas::types::IClass>& something
    : aas::iteration::Descent(instance)
  ) {
    parts.emplace_back(test::common::TraceMark(*something));
    parts.push_back(L"\n");
  }

  test::common::AssertContentEqualsExpectedOrRecord(
    aas::common::WstringToUtf8(
      test::common::JoinWstrings(parts, L"")
    ),
    trace_path
  );
}

void AssertOrRerecordDescentOnce(
  const std::shared_ptr<aas::types::IClass>& instance,
  const std::filesystem::path& trace_path
) {
  std::deque<std::wstring> parts;

  for (
    const std::shared_ptr<aas::types::IClass>& something
    : aas::iteration::DescentOnce(instance)
  ) {
    parts.emplace_back(test::common::TraceMark(*something));
    parts.push_back(L"\n");
  }

  test::common::AssertContentEqualsExpectedOrRecord(
    aas::common::WstringToUtf8(
      test::common::JoinWstrings(parts, L"")
    ),
    trace_path
  );
}

TEST_CASE("Test Descent over an Extension") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "extension",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Extension") {
  const std::shared_ptr<
    aas::types::IExtension
  > instance(
    test::common::examples::LoadMaxExtension()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxExtension.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an AdministrativeInformation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "administrativeInformation",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an AdministrativeInformation") {
  const std::shared_ptr<
    aas::types::IAdministrativeInformation
  > instance(
    test::common::examples::LoadMaxAdministrativeInformation()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxAdministrativeInformation.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Qualifier") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "qualifier",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Qualifier") {
  const std::shared_ptr<
    aas::types::IQualifier
  > instance(
    test::common::examples::LoadMaxQualifier()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxQualifier.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an AssetAdministrationShell") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "assetAdministrationShell",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an AssetAdministrationShell") {
  const std::shared_ptr<
    aas::types::IAssetAdministrationShell
  > instance(
    test::common::examples::LoadMaxAssetAdministrationShell()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxAssetAdministrationShell.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an AssetInformation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "assetInformation",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an AssetInformation") {
  const std::shared_ptr<
    aas::types::IAssetInformation
  > instance(
    test::common::examples::LoadMaxAssetInformation()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxAssetInformation.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Resource") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "resource",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Resource") {
  const std::shared_ptr<
    aas::types::IResource
  > instance(
    test::common::examples::LoadMaxResource()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxResource.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an SpecificAssetId") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "specificAssetId",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an SpecificAssetId") {
  const std::shared_ptr<
    aas::types::ISpecificAssetId
  > instance(
    test::common::examples::LoadMaxSpecificAssetId()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxSpecificAssetId.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Submodel") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodel",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Submodel") {
  const std::shared_ptr<
    aas::types::ISubmodel
  > instance(
    test::common::examples::LoadMaxSubmodel()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxSubmodel.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an RelationshipElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "relationshipElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an RelationshipElement") {
  const std::shared_ptr<
    aas::types::IRelationshipElement
  > instance(
    test::common::examples::LoadMaxRelationshipElement()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxRelationshipElement.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an SubmodelElementList") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodelElementList",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an SubmodelElementList") {
  const std::shared_ptr<
    aas::types::ISubmodelElementList
  > instance(
    test::common::examples::LoadMaxSubmodelElementList()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxSubmodelElementList.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an SubmodelElementCollection") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "submodelElementCollection",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an SubmodelElementCollection") {
  const std::shared_ptr<
    aas::types::ISubmodelElementCollection
  > instance(
    test::common::examples::LoadMaxSubmodelElementCollection()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxSubmodelElementCollection.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Property") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "property",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Property") {
  const std::shared_ptr<
    aas::types::IProperty
  > instance(
    test::common::examples::LoadMaxProperty()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxProperty.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an MultiLanguageProperty") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "multiLanguageProperty",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an MultiLanguageProperty") {
  const std::shared_ptr<
    aas::types::IMultiLanguageProperty
  > instance(
    test::common::examples::LoadMaxMultiLanguageProperty()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxMultiLanguageProperty.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Range") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "range",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Range") {
  const std::shared_ptr<
    aas::types::IRange
  > instance(
    test::common::examples::LoadMaxRange()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxRange.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an ReferenceElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "referenceElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an ReferenceElement") {
  const std::shared_ptr<
    aas::types::IReferenceElement
  > instance(
    test::common::examples::LoadMaxReferenceElement()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxReferenceElement.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Blob") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "blob",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Blob") {
  const std::shared_ptr<
    aas::types::IBlob
  > instance(
    test::common::examples::LoadMaxBlob()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxBlob.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an File") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "file",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an File") {
  const std::shared_ptr<
    aas::types::IFile
  > instance(
    test::common::examples::LoadMaxFile()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxFile.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an AnnotatedRelationshipElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "annotatedRelationshipElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an AnnotatedRelationshipElement") {
  const std::shared_ptr<
    aas::types::IAnnotatedRelationshipElement
  > instance(
    test::common::examples::LoadMaxAnnotatedRelationshipElement()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxAnnotatedRelationshipElement.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Entity") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "entity",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Entity") {
  const std::shared_ptr<
    aas::types::IEntity
  > instance(
    test::common::examples::LoadMaxEntity()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxEntity.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an EventPayload") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "SelfContained"
        / "Expected"
        / "eventPayload",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an EventPayload") {
  const std::shared_ptr<
    aas::types::IEventPayload
  > instance(
    test::common::examples::LoadMaxEventPayload()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxEventPayload.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an BasicEventElement") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "basicEventElement",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an BasicEventElement") {
  const std::shared_ptr<
    aas::types::IBasicEventElement
  > instance(
    test::common::examples::LoadMaxBasicEventElement()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxBasicEventElement.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Operation") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "operation",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Operation") {
  const std::shared_ptr<
    aas::types::IOperation
  > instance(
    test::common::examples::LoadMaxOperation()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxOperation.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an OperationVariable") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "operationVariable",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an OperationVariable") {
  const std::shared_ptr<
    aas::types::IOperationVariable
  > instance(
    test::common::examples::LoadMaxOperationVariable()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxOperationVariable.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Capability") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "capability",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Capability") {
  const std::shared_ptr<
    aas::types::ICapability
  > instance(
    test::common::examples::LoadMaxCapability()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxCapability.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an ConceptDescription") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "conceptDescription",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an ConceptDescription") {
  const std::shared_ptr<
    aas::types::IConceptDescription
  > instance(
    test::common::examples::LoadMaxConceptDescription()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxConceptDescription.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Reference") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "reference",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Reference") {
  const std::shared_ptr<
    aas::types::IReference
  > instance(
    test::common::examples::LoadMaxReference()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxReference.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Key") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "key",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Key") {
  const std::shared_ptr<
    aas::types::IKey
  > instance(
    test::common::examples::LoadMaxKey()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxKey.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an LangStringNameType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringNameType",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an LangStringNameType") {
  const std::shared_ptr<
    aas::types::ILangStringNameType
  > instance(
    test::common::examples::LoadMaxLangStringNameType()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxLangStringNameType.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an LangStringTextType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringTextType",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an LangStringTextType") {
  const std::shared_ptr<
    aas::types::ILangStringTextType
  > instance(
    test::common::examples::LoadMaxLangStringTextType()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxLangStringTextType.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an Environment") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "SelfContained"
        / "Expected"
        / "environment",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an Environment") {
  const std::shared_ptr<
    aas::types::IEnvironment
  > instance(
    test::common::examples::LoadMaxEnvironment()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxEnvironment.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an EmbeddedDataSpecification") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "embeddedDataSpecification",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an EmbeddedDataSpecification") {
  const std::shared_ptr<
    aas::types::IEmbeddedDataSpecification
  > instance(
    test::common::examples::LoadMaxEmbeddedDataSpecification()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxEmbeddedDataSpecification.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an LevelType") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "levelType",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an LevelType") {
  const std::shared_ptr<
    aas::types::ILevelType
  > instance(
    test::common::examples::LoadMaxLevelType()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxLevelType.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an ValueReferencePair") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "valueReferencePair",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an ValueReferencePair") {
  const std::shared_ptr<
    aas::types::IValueReferencePair
  > instance(
    test::common::examples::LoadMaxValueReferencePair()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxValueReferencePair.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an ValueList") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "valueList",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an ValueList") {
  const std::shared_ptr<
    aas::types::IValueList
  > instance(
    test::common::examples::LoadMaxValueList()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxValueList.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an LangStringPreferredNameTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringPreferredNameTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an LangStringPreferredNameTypeIec61360") {
  const std::shared_ptr<
    aas::types::ILangStringPreferredNameTypeIec61360
  > instance(
    test::common::examples::LoadMaxLangStringPreferredNameTypeIec61360()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxLangStringPreferredNameTypeIec61360.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an LangStringShortNameTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringShortNameTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an LangStringShortNameTypeIec61360") {
  const std::shared_ptr<
    aas::types::ILangStringShortNameTypeIec61360
  > instance(
    test::common::examples::LoadMaxLangStringShortNameTypeIec61360()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxLangStringShortNameTypeIec61360.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an LangStringDefinitionTypeIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "langStringDefinitionTypeIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an LangStringDefinitionTypeIec61360") {
  const std::shared_ptr<
    aas::types::ILangStringDefinitionTypeIec61360
  > instance(
    test::common::examples::LoadMaxLangStringDefinitionTypeIec61360()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxLangStringDefinitionTypeIec61360.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

TEST_CASE("Test Descent over an DataSpecificationIec61360") {
  const std::deque<std::filesystem::path> paths(
    test::common::FindFilesBySuffixRecursively(
      DetermineXmlDir()
        / "ContainedInEnvironment"
        / "Expected"
        / "dataSpecificationIec61360",
      ".xml"
    )
  );

  for (const std::filesystem::path& path : paths) {
    const std::filesystem::path parent(
      (
        DetermineDescentDir()
          / std::filesystem::relative(path, DetermineXmlDir())
      ).parent_path()
    );

    const std::filesystem::path trace_path(
      parent
        / (path.filename().string() + ".trace")
    );

    AssertOrRerecordDescent(path, trace_path);
  }
}

TEST_CASE("Test DescentOnce over an DataSpecificationIec61360") {
  const std::shared_ptr<
    aas::types::IDataSpecificationIec61360
  > instance(
    test::common::examples::LoadMaxDataSpecificationIec61360()
  );

  const std::filesystem::path trace_path(
    DetermineDescentOnceDir()
      / "MaxDataSpecificationIec61360.trace"
  );

  AssertOrRerecordDescentOnce(instance, trace_path);
}

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_descent_and_descent_once.py
// Do NOT edit or append.
