// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_common_examples.py
// Do NOT edit or append.

#include "./common_examples.hpp"
#include "./common.hpp"
#include "./common_xmlization.hpp"

#include <aas_core/aas_3_0/iteration.hpp>
#include <aas_core/aas_3_0/stringification.hpp>

#include <filesystem>

namespace aas = aas_core::aas_3_0;

namespace test {
namespace common {
namespace examples {

template<typename T>
struct StaticTypeName;

template<>
struct StaticTypeName<
  aas::types::IExtension
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IExtension
>::name = "IExtension";

template<>
struct StaticTypeName<
  aas::types::IAdministrativeInformation
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IAdministrativeInformation
>::name = "IAdministrativeInformation";

template<>
struct StaticTypeName<
  aas::types::IQualifier
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IQualifier
>::name = "IQualifier";

template<>
struct StaticTypeName<
  aas::types::IAssetAdministrationShell
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IAssetAdministrationShell
>::name = "IAssetAdministrationShell";

template<>
struct StaticTypeName<
  aas::types::IAssetInformation
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IAssetInformation
>::name = "IAssetInformation";

template<>
struct StaticTypeName<
  aas::types::IResource
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IResource
>::name = "IResource";

template<>
struct StaticTypeName<
  aas::types::ISpecificAssetId
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::ISpecificAssetId
>::name = "ISpecificAssetId";

template<>
struct StaticTypeName<
  aas::types::ISubmodel
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::ISubmodel
>::name = "ISubmodel";

template<>
struct StaticTypeName<
  aas::types::IRelationshipElement
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IRelationshipElement
>::name = "IRelationshipElement";

template<>
struct StaticTypeName<
  aas::types::ISubmodelElementList
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::ISubmodelElementList
>::name = "ISubmodelElementList";

template<>
struct StaticTypeName<
  aas::types::ISubmodelElementCollection
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::ISubmodelElementCollection
>::name = "ISubmodelElementCollection";

template<>
struct StaticTypeName<
  aas::types::IProperty
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IProperty
>::name = "IProperty";

template<>
struct StaticTypeName<
  aas::types::IMultiLanguageProperty
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IMultiLanguageProperty
>::name = "IMultiLanguageProperty";

template<>
struct StaticTypeName<
  aas::types::IRange
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IRange
>::name = "IRange";

template<>
struct StaticTypeName<
  aas::types::IReferenceElement
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IReferenceElement
>::name = "IReferenceElement";

template<>
struct StaticTypeName<
  aas::types::IBlob
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IBlob
>::name = "IBlob";

template<>
struct StaticTypeName<
  aas::types::IFile
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IFile
>::name = "IFile";

template<>
struct StaticTypeName<
  aas::types::IAnnotatedRelationshipElement
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IAnnotatedRelationshipElement
>::name = "IAnnotatedRelationshipElement";

template<>
struct StaticTypeName<
  aas::types::IEntity
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IEntity
>::name = "IEntity";

template<>
struct StaticTypeName<
  aas::types::IEventPayload
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IEventPayload
>::name = "IEventPayload";

template<>
struct StaticTypeName<
  aas::types::IBasicEventElement
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IBasicEventElement
>::name = "IBasicEventElement";

template<>
struct StaticTypeName<
  aas::types::IOperation
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IOperation
>::name = "IOperation";

template<>
struct StaticTypeName<
  aas::types::IOperationVariable
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IOperationVariable
>::name = "IOperationVariable";

template<>
struct StaticTypeName<
  aas::types::ICapability
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::ICapability
>::name = "ICapability";

template<>
struct StaticTypeName<
  aas::types::IConceptDescription
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IConceptDescription
>::name = "IConceptDescription";

template<>
struct StaticTypeName<
  aas::types::IReference
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IReference
>::name = "IReference";

template<>
struct StaticTypeName<
  aas::types::IKey
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IKey
>::name = "IKey";

template<>
struct StaticTypeName<
  aas::types::ILangStringNameType
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::ILangStringNameType
>::name = "ILangStringNameType";

template<>
struct StaticTypeName<
  aas::types::ILangStringTextType
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::ILangStringTextType
>::name = "ILangStringTextType";

template<>
struct StaticTypeName<
  aas::types::IEnvironment
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IEnvironment
>::name = "IEnvironment";

template<>
struct StaticTypeName<
  aas::types::IEmbeddedDataSpecification
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IEmbeddedDataSpecification
>::name = "IEmbeddedDataSpecification";

template<>
struct StaticTypeName<
  aas::types::ILevelType
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::ILevelType
>::name = "ILevelType";

template<>
struct StaticTypeName<
  aas::types::IValueReferencePair
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IValueReferencePair
>::name = "IValueReferencePair";

template<>
struct StaticTypeName<
  aas::types::IValueList
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IValueList
>::name = "IValueList";

template<>
struct StaticTypeName<
  aas::types::ILangStringPreferredNameTypeIec61360
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::ILangStringPreferredNameTypeIec61360
>::name = "ILangStringPreferredNameTypeIec61360";

template<>
struct StaticTypeName<
  aas::types::ILangStringShortNameTypeIec61360
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::ILangStringShortNameTypeIec61360
>::name = "ILangStringShortNameTypeIec61360";

template<>
struct StaticTypeName<
  aas::types::ILangStringDefinitionTypeIec61360
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::ILangStringDefinitionTypeIec61360
>::name = "ILangStringDefinitionTypeIec61360";

template<>
struct StaticTypeName<
  aas::types::IDataSpecificationIec61360
> {
  static const char* name;
};
const char* StaticTypeName<
  aas::types::IDataSpecificationIec61360
>::name = "IDataSpecificationIec61360";

template<
  typename T,
  typename C
>
std::optional<
  std::shared_ptr<T>
> FindFirstOfType(
  const std::shared_ptr<C>& container
) {
  std::shared_ptr<T> casted(
    std::dynamic_pointer_cast<T>(
      container
    )
  );
  if (casted != nullptr) {
    return casted;
  }

  for (
    const std::shared_ptr<aas::types::IClass>& something
    : aas::iteration::Descent(container)
    ) {
    casted = std::dynamic_pointer_cast<T>(something);
    if (casted != nullptr) {
      return casted;
    }
  }

  throw std::logic_error(
    aas::common::Concat(
      "Could not find an instance of ",
      StaticTypeName<T>::name,
      "in the container of type ",
      aas::stringification::to_string(container->model_type())
    )
  );
}

std::shared_ptr<
  aas::types::IExtension
> LoadExtension(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IExtension
    >
  > first = FindFirstOfType<
    aas::types::IExtension,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IExtension "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IExtension
> LoadMinExtension() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "extension"
      / "minimal.xml"
  );

  return LoadExtension(
    path
  );
}

std::shared_ptr<
  aas::types::IExtension
> LoadMaxExtension() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "extension"
      / "maximal.xml"
  );

  return LoadExtension(
    path
  );
}

std::shared_ptr<
  aas::types::IAdministrativeInformation
> LoadAdministrativeInformation(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IAdministrativeInformation
    >
  > first = FindFirstOfType<
    aas::types::IAdministrativeInformation,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IAdministrativeInformation "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IAdministrativeInformation
> LoadMinAdministrativeInformation() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "administrativeInformation"
      / "minimal.xml"
  );

  return LoadAdministrativeInformation(
    path
  );
}

std::shared_ptr<
  aas::types::IAdministrativeInformation
> LoadMaxAdministrativeInformation() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "administrativeInformation"
      / "maximal.xml"
  );

  return LoadAdministrativeInformation(
    path
  );
}

std::shared_ptr<
  aas::types::IQualifier
> LoadQualifier(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IQualifier
    >
  > first = FindFirstOfType<
    aas::types::IQualifier,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IQualifier "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IQualifier
> LoadMinQualifier() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "qualifier"
      / "minimal.xml"
  );

  return LoadQualifier(
    path
  );
}

std::shared_ptr<
  aas::types::IQualifier
> LoadMaxQualifier() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "qualifier"
      / "maximal.xml"
  );

  return LoadQualifier(
    path
  );
}

std::shared_ptr<
  aas::types::IAssetAdministrationShell
> LoadAssetAdministrationShell(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IAssetAdministrationShell
    >
  > first = FindFirstOfType<
    aas::types::IAssetAdministrationShell,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IAssetAdministrationShell "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IAssetAdministrationShell
> LoadMinAssetAdministrationShell() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "assetAdministrationShell"
      / "minimal.xml"
  );

  return LoadAssetAdministrationShell(
    path
  );
}

std::shared_ptr<
  aas::types::IAssetAdministrationShell
> LoadMaxAssetAdministrationShell() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "assetAdministrationShell"
      / "maximal.xml"
  );

  return LoadAssetAdministrationShell(
    path
  );
}

std::shared_ptr<
  aas::types::IAssetInformation
> LoadAssetInformation(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IAssetInformation
    >
  > first = FindFirstOfType<
    aas::types::IAssetInformation,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IAssetInformation "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IAssetInformation
> LoadMinAssetInformation() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "assetInformation"
      / "minimal.xml"
  );

  return LoadAssetInformation(
    path
  );
}

std::shared_ptr<
  aas::types::IAssetInformation
> LoadMaxAssetInformation() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "assetInformation"
      / "maximal.xml"
  );

  return LoadAssetInformation(
    path
  );
}

std::shared_ptr<
  aas::types::IResource
> LoadResource(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IResource
    >
  > first = FindFirstOfType<
    aas::types::IResource,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IResource "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IResource
> LoadMinResource() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "resource"
      / "minimal.xml"
  );

  return LoadResource(
    path
  );
}

std::shared_ptr<
  aas::types::IResource
> LoadMaxResource() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "resource"
      / "maximal.xml"
  );

  return LoadResource(
    path
  );
}

std::shared_ptr<
  aas::types::ISpecificAssetId
> LoadSpecificAssetId(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::ISpecificAssetId
    >
  > first = FindFirstOfType<
    aas::types::ISpecificAssetId,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of ISpecificAssetId "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::ISpecificAssetId
> LoadMinSpecificAssetId() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "specificAssetId"
      / "minimal.xml"
  );

  return LoadSpecificAssetId(
    path
  );
}

std::shared_ptr<
  aas::types::ISpecificAssetId
> LoadMaxSpecificAssetId() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "specificAssetId"
      / "maximal.xml"
  );

  return LoadSpecificAssetId(
    path
  );
}

std::shared_ptr<
  aas::types::ISubmodel
> LoadSubmodel(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::ISubmodel
    >
  > first = FindFirstOfType<
    aas::types::ISubmodel,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of ISubmodel "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::ISubmodel
> LoadMinSubmodel() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "submodel"
      / "minimal.xml"
  );

  return LoadSubmodel(
    path
  );
}

std::shared_ptr<
  aas::types::ISubmodel
> LoadMaxSubmodel() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "submodel"
      / "maximal.xml"
  );

  return LoadSubmodel(
    path
  );
}

std::shared_ptr<
  aas::types::IRelationshipElement
> LoadRelationshipElement(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IRelationshipElement
    >
  > first = FindFirstOfType<
    aas::types::IRelationshipElement,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IRelationshipElement "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IRelationshipElement
> LoadMinRelationshipElement() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "relationshipElement"
      / "minimal.xml"
  );

  return LoadRelationshipElement(
    path
  );
}

std::shared_ptr<
  aas::types::IRelationshipElement
> LoadMaxRelationshipElement() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "relationshipElement"
      / "maximal.xml"
  );

  return LoadRelationshipElement(
    path
  );
}

std::shared_ptr<
  aas::types::ISubmodelElementList
> LoadSubmodelElementList(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::ISubmodelElementList
    >
  > first = FindFirstOfType<
    aas::types::ISubmodelElementList,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of ISubmodelElementList "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::ISubmodelElementList
> LoadMinSubmodelElementList() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "submodelElementList"
      / "minimal.xml"
  );

  return LoadSubmodelElementList(
    path
  );
}

std::shared_ptr<
  aas::types::ISubmodelElementList
> LoadMaxSubmodelElementList() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "submodelElementList"
      / "maximal.xml"
  );

  return LoadSubmodelElementList(
    path
  );
}

std::shared_ptr<
  aas::types::ISubmodelElementCollection
> LoadSubmodelElementCollection(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::ISubmodelElementCollection
    >
  > first = FindFirstOfType<
    aas::types::ISubmodelElementCollection,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of ISubmodelElementCollection "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::ISubmodelElementCollection
> LoadMinSubmodelElementCollection() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "submodelElementCollection"
      / "minimal.xml"
  );

  return LoadSubmodelElementCollection(
    path
  );
}

std::shared_ptr<
  aas::types::ISubmodelElementCollection
> LoadMaxSubmodelElementCollection() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "submodelElementCollection"
      / "maximal.xml"
  );

  return LoadSubmodelElementCollection(
    path
  );
}

std::shared_ptr<
  aas::types::IProperty
> LoadProperty(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IProperty
    >
  > first = FindFirstOfType<
    aas::types::IProperty,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IProperty "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IProperty
> LoadMinProperty() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "property"
      / "minimal.xml"
  );

  return LoadProperty(
    path
  );
}

std::shared_ptr<
  aas::types::IProperty
> LoadMaxProperty() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "property"
      / "maximal.xml"
  );

  return LoadProperty(
    path
  );
}

std::shared_ptr<
  aas::types::IMultiLanguageProperty
> LoadMultiLanguageProperty(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IMultiLanguageProperty
    >
  > first = FindFirstOfType<
    aas::types::IMultiLanguageProperty,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IMultiLanguageProperty "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IMultiLanguageProperty
> LoadMinMultiLanguageProperty() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "multiLanguageProperty"
      / "minimal.xml"
  );

  return LoadMultiLanguageProperty(
    path
  );
}

std::shared_ptr<
  aas::types::IMultiLanguageProperty
> LoadMaxMultiLanguageProperty() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "multiLanguageProperty"
      / "maximal.xml"
  );

  return LoadMultiLanguageProperty(
    path
  );
}

std::shared_ptr<
  aas::types::IRange
> LoadRange(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IRange
    >
  > first = FindFirstOfType<
    aas::types::IRange,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IRange "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IRange
> LoadMinRange() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "range"
      / "minimal.xml"
  );

  return LoadRange(
    path
  );
}

std::shared_ptr<
  aas::types::IRange
> LoadMaxRange() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "range"
      / "maximal.xml"
  );

  return LoadRange(
    path
  );
}

std::shared_ptr<
  aas::types::IReferenceElement
> LoadReferenceElement(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IReferenceElement
    >
  > first = FindFirstOfType<
    aas::types::IReferenceElement,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IReferenceElement "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IReferenceElement
> LoadMinReferenceElement() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "referenceElement"
      / "minimal.xml"
  );

  return LoadReferenceElement(
    path
  );
}

std::shared_ptr<
  aas::types::IReferenceElement
> LoadMaxReferenceElement() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "referenceElement"
      / "maximal.xml"
  );

  return LoadReferenceElement(
    path
  );
}

std::shared_ptr<
  aas::types::IBlob
> LoadBlob(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IBlob
    >
  > first = FindFirstOfType<
    aas::types::IBlob,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IBlob "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IBlob
> LoadMinBlob() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "blob"
      / "minimal.xml"
  );

  return LoadBlob(
    path
  );
}

std::shared_ptr<
  aas::types::IBlob
> LoadMaxBlob() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "blob"
      / "maximal.xml"
  );

  return LoadBlob(
    path
  );
}

std::shared_ptr<
  aas::types::IFile
> LoadFile(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IFile
    >
  > first = FindFirstOfType<
    aas::types::IFile,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IFile "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IFile
> LoadMinFile() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "file"
      / "minimal.xml"
  );

  return LoadFile(
    path
  );
}

std::shared_ptr<
  aas::types::IFile
> LoadMaxFile() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "file"
      / "maximal.xml"
  );

  return LoadFile(
    path
  );
}

std::shared_ptr<
  aas::types::IAnnotatedRelationshipElement
> LoadAnnotatedRelationshipElement(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IAnnotatedRelationshipElement
    >
  > first = FindFirstOfType<
    aas::types::IAnnotatedRelationshipElement,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IAnnotatedRelationshipElement "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IAnnotatedRelationshipElement
> LoadMinAnnotatedRelationshipElement() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "annotatedRelationshipElement"
      / "minimal.xml"
  );

  return LoadAnnotatedRelationshipElement(
    path
  );
}

std::shared_ptr<
  aas::types::IAnnotatedRelationshipElement
> LoadMaxAnnotatedRelationshipElement() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "annotatedRelationshipElement"
      / "maximal.xml"
  );

  return LoadAnnotatedRelationshipElement(
    path
  );
}

std::shared_ptr<
  aas::types::IEntity
> LoadEntity(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IEntity
    >
  > first = FindFirstOfType<
    aas::types::IEntity,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IEntity "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IEntity
> LoadMinEntity() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "entity"
      / "minimal.xml"
  );

  return LoadEntity(
    path
  );
}

std::shared_ptr<
  aas::types::IEntity
> LoadMaxEntity() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "entity"
      / "maximal.xml"
  );

  return LoadEntity(
    path
  );
}

std::shared_ptr<
  aas::types::IEventPayload
> LoadEventPayload(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEventPayload
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEventPayload
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEventPayload from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IEventPayload
    >
  > first = FindFirstOfType<
    aas::types::IEventPayload,
    aas::types::IEventPayload
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IEventPayload "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IEventPayload
> LoadMinEventPayload() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "SelfContained"
      / "Expected"
      / "eventPayload"
      / "minimal.xml"
  );

  return LoadEventPayload(
    path
  );
}

std::shared_ptr<
  aas::types::IEventPayload
> LoadMaxEventPayload() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "SelfContained"
      / "Expected"
      / "eventPayload"
      / "maximal.xml"
  );

  return LoadEventPayload(
    path
  );
}

std::shared_ptr<
  aas::types::IBasicEventElement
> LoadBasicEventElement(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IBasicEventElement
    >
  > first = FindFirstOfType<
    aas::types::IBasicEventElement,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IBasicEventElement "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IBasicEventElement
> LoadMinBasicEventElement() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "basicEventElement"
      / "minimal.xml"
  );

  return LoadBasicEventElement(
    path
  );
}

std::shared_ptr<
  aas::types::IBasicEventElement
> LoadMaxBasicEventElement() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "basicEventElement"
      / "maximal.xml"
  );

  return LoadBasicEventElement(
    path
  );
}

std::shared_ptr<
  aas::types::IOperation
> LoadOperation(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IOperation
    >
  > first = FindFirstOfType<
    aas::types::IOperation,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IOperation "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IOperation
> LoadMinOperation() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "operation"
      / "minimal.xml"
  );

  return LoadOperation(
    path
  );
}

std::shared_ptr<
  aas::types::IOperation
> LoadMaxOperation() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "operation"
      / "maximal.xml"
  );

  return LoadOperation(
    path
  );
}

std::shared_ptr<
  aas::types::IOperationVariable
> LoadOperationVariable(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IOperationVariable
    >
  > first = FindFirstOfType<
    aas::types::IOperationVariable,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IOperationVariable "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IOperationVariable
> LoadMinOperationVariable() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "operationVariable"
      / "minimal.xml"
  );

  return LoadOperationVariable(
    path
  );
}

std::shared_ptr<
  aas::types::IOperationVariable
> LoadMaxOperationVariable() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "operationVariable"
      / "maximal.xml"
  );

  return LoadOperationVariable(
    path
  );
}

std::shared_ptr<
  aas::types::ICapability
> LoadCapability(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::ICapability
    >
  > first = FindFirstOfType<
    aas::types::ICapability,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of ICapability "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::ICapability
> LoadMinCapability() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "capability"
      / "minimal.xml"
  );

  return LoadCapability(
    path
  );
}

std::shared_ptr<
  aas::types::ICapability
> LoadMaxCapability() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "capability"
      / "maximal.xml"
  );

  return LoadCapability(
    path
  );
}

std::shared_ptr<
  aas::types::IConceptDescription
> LoadConceptDescription(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IConceptDescription
    >
  > first = FindFirstOfType<
    aas::types::IConceptDescription,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IConceptDescription "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IConceptDescription
> LoadMinConceptDescription() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "conceptDescription"
      / "minimal.xml"
  );

  return LoadConceptDescription(
    path
  );
}

std::shared_ptr<
  aas::types::IConceptDescription
> LoadMaxConceptDescription() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "conceptDescription"
      / "maximal.xml"
  );

  return LoadConceptDescription(
    path
  );
}

std::shared_ptr<
  aas::types::IReference
> LoadReference(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IReference
    >
  > first = FindFirstOfType<
    aas::types::IReference,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IReference "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IReference
> LoadMinReference() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "reference"
      / "minimal.xml"
  );

  return LoadReference(
    path
  );
}

std::shared_ptr<
  aas::types::IReference
> LoadMaxReference() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "reference"
      / "maximal.xml"
  );

  return LoadReference(
    path
  );
}

std::shared_ptr<
  aas::types::IKey
> LoadKey(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IKey
    >
  > first = FindFirstOfType<
    aas::types::IKey,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IKey "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IKey
> LoadMinKey() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "key"
      / "minimal.xml"
  );

  return LoadKey(
    path
  );
}

std::shared_ptr<
  aas::types::IKey
> LoadMaxKey() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "key"
      / "maximal.xml"
  );

  return LoadKey(
    path
  );
}

std::shared_ptr<
  aas::types::ILangStringNameType
> LoadLangStringNameType(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::ILangStringNameType
    >
  > first = FindFirstOfType<
    aas::types::ILangStringNameType,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of ILangStringNameType "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::ILangStringNameType
> LoadMinLangStringNameType() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "langStringNameType"
      / "minimal.xml"
  );

  return LoadLangStringNameType(
    path
  );
}

std::shared_ptr<
  aas::types::ILangStringNameType
> LoadMaxLangStringNameType() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "langStringNameType"
      / "maximal.xml"
  );

  return LoadLangStringNameType(
    path
  );
}

std::shared_ptr<
  aas::types::ILangStringTextType
> LoadLangStringTextType(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::ILangStringTextType
    >
  > first = FindFirstOfType<
    aas::types::ILangStringTextType,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of ILangStringTextType "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::ILangStringTextType
> LoadMinLangStringTextType() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "langStringTextType"
      / "minimal.xml"
  );

  return LoadLangStringTextType(
    path
  );
}

std::shared_ptr<
  aas::types::ILangStringTextType
> LoadMaxLangStringTextType() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "langStringTextType"
      / "maximal.xml"
  );

  return LoadLangStringTextType(
    path
  );
}

std::shared_ptr<
  aas::types::IEnvironment
> LoadEnvironment(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IEnvironment
    >
  > first = FindFirstOfType<
    aas::types::IEnvironment,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IEnvironment "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IEnvironment
> LoadMinEnvironment() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "SelfContained"
      / "Expected"
      / "environment"
      / "minimal.xml"
  );

  return LoadEnvironment(
    path
  );
}

std::shared_ptr<
  aas::types::IEnvironment
> LoadMaxEnvironment() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "SelfContained"
      / "Expected"
      / "environment"
      / "maximal.xml"
  );

  return LoadEnvironment(
    path
  );
}

std::shared_ptr<
  aas::types::IEmbeddedDataSpecification
> LoadEmbeddedDataSpecification(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IEmbeddedDataSpecification
    >
  > first = FindFirstOfType<
    aas::types::IEmbeddedDataSpecification,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IEmbeddedDataSpecification "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IEmbeddedDataSpecification
> LoadMinEmbeddedDataSpecification() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "embeddedDataSpecification"
      / "minimal.xml"
  );

  return LoadEmbeddedDataSpecification(
    path
  );
}

std::shared_ptr<
  aas::types::IEmbeddedDataSpecification
> LoadMaxEmbeddedDataSpecification() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "embeddedDataSpecification"
      / "maximal.xml"
  );

  return LoadEmbeddedDataSpecification(
    path
  );
}

std::shared_ptr<
  aas::types::ILevelType
> LoadLevelType(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::ILevelType
    >
  > first = FindFirstOfType<
    aas::types::ILevelType,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of ILevelType "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::ILevelType
> LoadMinLevelType() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "levelType"
      / "minimal.xml"
  );

  return LoadLevelType(
    path
  );
}

std::shared_ptr<
  aas::types::ILevelType
> LoadMaxLevelType() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "levelType"
      / "maximal.xml"
  );

  return LoadLevelType(
    path
  );
}

std::shared_ptr<
  aas::types::IValueReferencePair
> LoadValueReferencePair(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IValueReferencePair
    >
  > first = FindFirstOfType<
    aas::types::IValueReferencePair,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IValueReferencePair "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IValueReferencePair
> LoadMinValueReferencePair() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "valueReferencePair"
      / "minimal.xml"
  );

  return LoadValueReferencePair(
    path
  );
}

std::shared_ptr<
  aas::types::IValueReferencePair
> LoadMaxValueReferencePair() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "valueReferencePair"
      / "maximal.xml"
  );

  return LoadValueReferencePair(
    path
  );
}

std::shared_ptr<
  aas::types::IValueList
> LoadValueList(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IValueList
    >
  > first = FindFirstOfType<
    aas::types::IValueList,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IValueList "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IValueList
> LoadMinValueList() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "valueList"
      / "minimal.xml"
  );

  return LoadValueList(
    path
  );
}

std::shared_ptr<
  aas::types::IValueList
> LoadMaxValueList() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "valueList"
      / "maximal.xml"
  );

  return LoadValueList(
    path
  );
}

std::shared_ptr<
  aas::types::ILangStringPreferredNameTypeIec61360
> LoadLangStringPreferredNameTypeIec61360(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::ILangStringPreferredNameTypeIec61360
    >
  > first = FindFirstOfType<
    aas::types::ILangStringPreferredNameTypeIec61360,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of ILangStringPreferredNameTypeIec61360 "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::ILangStringPreferredNameTypeIec61360
> LoadMinLangStringPreferredNameTypeIec61360() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "langStringPreferredNameTypeIec61360"
      / "minimal.xml"
  );

  return LoadLangStringPreferredNameTypeIec61360(
    path
  );
}

std::shared_ptr<
  aas::types::ILangStringPreferredNameTypeIec61360
> LoadMaxLangStringPreferredNameTypeIec61360() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "langStringPreferredNameTypeIec61360"
      / "maximal.xml"
  );

  return LoadLangStringPreferredNameTypeIec61360(
    path
  );
}

std::shared_ptr<
  aas::types::ILangStringShortNameTypeIec61360
> LoadLangStringShortNameTypeIec61360(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::ILangStringShortNameTypeIec61360
    >
  > first = FindFirstOfType<
    aas::types::ILangStringShortNameTypeIec61360,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of ILangStringShortNameTypeIec61360 "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::ILangStringShortNameTypeIec61360
> LoadMinLangStringShortNameTypeIec61360() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "langStringShortNameTypeIec61360"
      / "minimal.xml"
  );

  return LoadLangStringShortNameTypeIec61360(
    path
  );
}

std::shared_ptr<
  aas::types::ILangStringShortNameTypeIec61360
> LoadMaxLangStringShortNameTypeIec61360() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "langStringShortNameTypeIec61360"
      / "maximal.xml"
  );

  return LoadLangStringShortNameTypeIec61360(
    path
  );
}

std::shared_ptr<
  aas::types::ILangStringDefinitionTypeIec61360
> LoadLangStringDefinitionTypeIec61360(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::ILangStringDefinitionTypeIec61360
    >
  > first = FindFirstOfType<
    aas::types::ILangStringDefinitionTypeIec61360,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of ILangStringDefinitionTypeIec61360 "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::ILangStringDefinitionTypeIec61360
> LoadMinLangStringDefinitionTypeIec61360() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "langStringDefinitionTypeIec61360"
      / "minimal.xml"
  );

  return LoadLangStringDefinitionTypeIec61360(
    path
  );
}

std::shared_ptr<
  aas::types::ILangStringDefinitionTypeIec61360
> LoadMaxLangStringDefinitionTypeIec61360() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "langStringDefinitionTypeIec61360"
      / "maximal.xml"
  );

  return LoadLangStringDefinitionTypeIec61360(
    path
  );
}

std::shared_ptr<
  aas::types::IDataSpecificationIec61360
> LoadDataSpecificationIec61360(
  const std::filesystem::path& path
) {
  

  std::shared_ptr<
    aas::types::IClass
  > abstract = test::common::xmlization::MustReadInstance(
    path
  );

  std::shared_ptr<
    aas::types::IEnvironment
  > container(
    std::dynamic_pointer_cast<
      aas::types::IEnvironment
    >(
      abstract
    )
  );

  if (container == nullptr) {
    throw std::runtime_error(
      aas::common::Concat(
        "Failed to cast the instance to IEnvironment from ",
        path.string()
      )
    );
  }

  std::optional<
    std::shared_ptr<
      aas::types::IDataSpecificationIec61360
    >
  > first = FindFirstOfType<
    aas::types::IDataSpecificationIec61360,
    aas::types::IEnvironment
  >(
    container
  );

  if (!first.has_value()) {
    throw std::runtime_error(
      aas::common::Concat(
        "Could not find an instance of IDataSpecificationIec61360 "
        "in the XML loaded from ",
        path.string()
      )
    );
  }

  return std::move(*first);
}

std::shared_ptr<
  aas::types::IDataSpecificationIec61360
> LoadMinDataSpecificationIec61360() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "dataSpecificationIec61360"
      / "minimal.xml"
  );

  return LoadDataSpecificationIec61360(
    path
  );
}

std::shared_ptr<
  aas::types::IDataSpecificationIec61360
> LoadMaxDataSpecificationIec61360() {
  const std::filesystem::path path(
    test::common::DetermineTestDataDir()
      / "Xml"
      / "ContainedInEnvironment"
      / "Expected"
      / "dataSpecificationIec61360"
      / "maximal.xml"
  );

  return LoadDataSpecificationIec61360(
    path
  );
}

}  // namespace examples
}  // namespace common
}  // namespace test

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_common_examples.py
// Do NOT edit or append.
